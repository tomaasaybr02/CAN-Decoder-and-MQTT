/**
 * @file batteries_gps_motor_2.h
 *
 * @brief This header file was generated by cantools version 40.2.1 Sun Mar 23 11:59:22 2025.
 *
 * @copyright Copyright (c) 2018-2019 Erik Moqvist
 *
 * @par License
 * The MIT License (MIT)
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#ifndef BATTERIES_GPS_MOTOR_2_H
#define BATTERIES_GPS_MOTOR_2_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_4_FRAME_ID (0x35du)
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_3_FRAME_ID (0x35cu)
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_2_FRAME_ID (0x35bu)
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_1_FRAME_ID (0x35au)
#define BATTERIES_GPS_MOTOR_2_BATTERY_VOLT_CURR_TEMP_4_FRAME_ID (0x362u)
#define BATTERIES_GPS_MOTOR_2_BATTERY_VOLT_CURR_TEMP_3_FRAME_ID (0x361u)
#define BATTERIES_GPS_MOTOR_2_BATTERY_VOLT_CURR_TEMP_2_FRAME_ID (0x360u)
#define BATTERIES_GPS_MOTOR_2_BATTERY_VOLT_CURR_TEMP_1_FRAME_ID (0x359u)
#define BATTERIES_GPS_MOTOR_2_SOC_SOH_4_FRAME_ID (0x358u)
#define BATTERIES_GPS_MOTOR_2_SOC_SOH_3_FRAME_ID (0x357u)
#define BATTERIES_GPS_MOTOR_2_SOC_SOH_2_FRAME_ID (0x356u)
#define BATTERIES_GPS_MOTOR_2_SOC_SOH_1_FRAME_ID (0x355u)
#define BATTERIES_GPS_MOTOR_2_CHARGE_STATUS_4_FRAME_ID (0x354u)
#define BATTERIES_GPS_MOTOR_2_CHARGE_STATUS_3_FRAME_ID (0x353u)
#define BATTERIES_GPS_MOTOR_2_CHARGE_STATUS_2_FRAME_ID (0x352u)
#define BATTERIES_GPS_MOTOR_2_CHARGE_STATUS_1_FRAME_ID (0x351u)
#define BATTERIES_GPS_MOTOR_2_GNSS_STATUS_FRAME_ID (0x01u)
#define BATTERIES_GPS_MOTOR_2_GNSS_TIME_FRAME_ID (0x02u)
#define BATTERIES_GPS_MOTOR_2_GNSS_POSITION_FRAME_ID (0x03u)
#define BATTERIES_GPS_MOTOR_2_GNSS_ALTITUDE_FRAME_ID (0x04u)
#define BATTERIES_GPS_MOTOR_2_GNSS_ATTITUDE_FRAME_ID (0x05u)
#define BATTERIES_GPS_MOTOR_2_GNSS_ODO_FRAME_ID (0x06u)
#define BATTERIES_GPS_MOTOR_2_GNSS_SPEED_FRAME_ID (0x07u)
#define BATTERIES_GPS_MOTOR_2_GNSS_GEOFENCE_FRAME_ID (0x08u)
#define BATTERIES_GPS_MOTOR_2_GNSS_IMU_FRAME_ID (0x09u)
#define BATTERIES_GPS_MOTOR_2_ENGINE_PARAM_RAPID_UPDATE_FRAME_ID (0x1f200u)
#define BATTERIES_GPS_MOTOR_2_ELECTRIC_DRIVE_STATUS_FRAME_ID (0x1f202u)
#define BATTERIES_GPS_MOTOR_2_ELECTRIC_ENERGY_STORAGE_STATUSE_FRAME_ID (0x1f203u)
#define BATTERIES_GPS_MOTOR_2_ENGINE_PARAM_DYNAMIC_FRAME_ID (0x1f201u)
#define BATTERIES_GPS_MOTOR_2_ELECTRIC_DRIVE_INFO_FRAME_ID (0x1f206u)
#define BATTERIES_GPS_MOTOR_2_ELECTRIC_DRIVE_STATUS_RAPID_UP_FRAME_ID (0x1f402u)
#define BATTERIES_GPS_MOTOR_2_COG_AND_SOG_FRAME_ID (0x1f802u)

/* Frame lengths in bytes. */
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_4_LENGTH (8u)
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_3_LENGTH (8u)
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_2_LENGTH (8u)
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_1_LENGTH (8u)
#define BATTERIES_GPS_MOTOR_2_BATTERY_VOLT_CURR_TEMP_4_LENGTH (6u)
#define BATTERIES_GPS_MOTOR_2_BATTERY_VOLT_CURR_TEMP_3_LENGTH (6u)
#define BATTERIES_GPS_MOTOR_2_BATTERY_VOLT_CURR_TEMP_2_LENGTH (6u)
#define BATTERIES_GPS_MOTOR_2_BATTERY_VOLT_CURR_TEMP_1_LENGTH (6u)
#define BATTERIES_GPS_MOTOR_2_SOC_SOH_4_LENGTH (6u)
#define BATTERIES_GPS_MOTOR_2_SOC_SOH_3_LENGTH (6u)
#define BATTERIES_GPS_MOTOR_2_SOC_SOH_2_LENGTH (6u)
#define BATTERIES_GPS_MOTOR_2_SOC_SOH_1_LENGTH (6u)
#define BATTERIES_GPS_MOTOR_2_CHARGE_STATUS_4_LENGTH (8u)
#define BATTERIES_GPS_MOTOR_2_CHARGE_STATUS_3_LENGTH (8u)
#define BATTERIES_GPS_MOTOR_2_CHARGE_STATUS_2_LENGTH (8u)
#define BATTERIES_GPS_MOTOR_2_CHARGE_STATUS_1_LENGTH (8u)
#define BATTERIES_GPS_MOTOR_2_GNSS_STATUS_LENGTH (1u)
#define BATTERIES_GPS_MOTOR_2_GNSS_TIME_LENGTH (6u)
#define BATTERIES_GPS_MOTOR_2_GNSS_POSITION_LENGTH (8u)
#define BATTERIES_GPS_MOTOR_2_GNSS_ALTITUDE_LENGTH (4u)
#define BATTERIES_GPS_MOTOR_2_GNSS_ATTITUDE_LENGTH (8u)
#define BATTERIES_GPS_MOTOR_2_GNSS_ODO_LENGTH (8u)
#define BATTERIES_GPS_MOTOR_2_GNSS_SPEED_LENGTH (5u)
#define BATTERIES_GPS_MOTOR_2_GNSS_GEOFENCE_LENGTH (2u)
#define BATTERIES_GPS_MOTOR_2_GNSS_IMU_LENGTH (8u)
#define BATTERIES_GPS_MOTOR_2_ENGINE_PARAM_RAPID_UPDATE_LENGTH (8u)
#define BATTERIES_GPS_MOTOR_2_ELECTRIC_DRIVE_STATUS_LENGTH (12u)
#define BATTERIES_GPS_MOTOR_2_ELECTRIC_ENERGY_STORAGE_STATUSE_LENGTH (15u)
#define BATTERIES_GPS_MOTOR_2_ENGINE_PARAM_DYNAMIC_LENGTH (26u)
#define BATTERIES_GPS_MOTOR_2_ELECTRIC_DRIVE_INFO_LENGTH (28u)
#define BATTERIES_GPS_MOTOR_2_ELECTRIC_DRIVE_STATUS_RAPID_UP_LENGTH (8u)
#define BATTERIES_GPS_MOTOR_2_COG_AND_SOG_LENGTH (8u)

/* Extended or standard frame types. */
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_4_IS_EXTENDED (0)
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_3_IS_EXTENDED (0)
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_2_IS_EXTENDED (0)
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_1_IS_EXTENDED (0)
#define BATTERIES_GPS_MOTOR_2_BATTERY_VOLT_CURR_TEMP_4_IS_EXTENDED (0)
#define BATTERIES_GPS_MOTOR_2_BATTERY_VOLT_CURR_TEMP_3_IS_EXTENDED (0)
#define BATTERIES_GPS_MOTOR_2_BATTERY_VOLT_CURR_TEMP_2_IS_EXTENDED (0)
#define BATTERIES_GPS_MOTOR_2_BATTERY_VOLT_CURR_TEMP_1_IS_EXTENDED (0)
#define BATTERIES_GPS_MOTOR_2_SOC_SOH_4_IS_EXTENDED (0)
#define BATTERIES_GPS_MOTOR_2_SOC_SOH_3_IS_EXTENDED (0)
#define BATTERIES_GPS_MOTOR_2_SOC_SOH_2_IS_EXTENDED (0)
#define BATTERIES_GPS_MOTOR_2_SOC_SOH_1_IS_EXTENDED (0)
#define BATTERIES_GPS_MOTOR_2_CHARGE_STATUS_4_IS_EXTENDED (0)
#define BATTERIES_GPS_MOTOR_2_CHARGE_STATUS_3_IS_EXTENDED (0)
#define BATTERIES_GPS_MOTOR_2_CHARGE_STATUS_2_IS_EXTENDED (0)
#define BATTERIES_GPS_MOTOR_2_CHARGE_STATUS_1_IS_EXTENDED (0)
#define BATTERIES_GPS_MOTOR_2_GNSS_STATUS_IS_EXTENDED (0)
#define BATTERIES_GPS_MOTOR_2_GNSS_TIME_IS_EXTENDED (0)
#define BATTERIES_GPS_MOTOR_2_GNSS_POSITION_IS_EXTENDED (0)
#define BATTERIES_GPS_MOTOR_2_GNSS_ALTITUDE_IS_EXTENDED (0)
#define BATTERIES_GPS_MOTOR_2_GNSS_ATTITUDE_IS_EXTENDED (0)
#define BATTERIES_GPS_MOTOR_2_GNSS_ODO_IS_EXTENDED (0)
#define BATTERIES_GPS_MOTOR_2_GNSS_SPEED_IS_EXTENDED (0)
#define BATTERIES_GPS_MOTOR_2_GNSS_GEOFENCE_IS_EXTENDED (0)
#define BATTERIES_GPS_MOTOR_2_GNSS_IMU_IS_EXTENDED (0)
#define BATTERIES_GPS_MOTOR_2_ENGINE_PARAM_RAPID_UPDATE_IS_EXTENDED (1)
#define BATTERIES_GPS_MOTOR_2_ELECTRIC_DRIVE_STATUS_IS_EXTENDED (1)
#define BATTERIES_GPS_MOTOR_2_ELECTRIC_ENERGY_STORAGE_STATUSE_IS_EXTENDED (1)
#define BATTERIES_GPS_MOTOR_2_ENGINE_PARAM_DYNAMIC_IS_EXTENDED (1)
#define BATTERIES_GPS_MOTOR_2_ELECTRIC_DRIVE_INFO_IS_EXTENDED (1)
#define BATTERIES_GPS_MOTOR_2_ELECTRIC_DRIVE_STATUS_RAPID_UP_IS_EXTENDED (1)
#define BATTERIES_GPS_MOTOR_2_COG_AND_SOG_IS_EXTENDED (1)

/* Frame cycle times in milliseconds. */


/* Signal choices. */


/* Frame Names. */
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_4_NAME "extra_battery_info_4"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_3_NAME "extra_battery_info_3"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_2_NAME "extra_battery_info_2"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_1_NAME "extra_battery_info_1"
#define BATTERIES_GPS_MOTOR_2_BATTERY_VOLT_CURR_TEMP_4_NAME "Battery_VoltCurrTemp_4"
#define BATTERIES_GPS_MOTOR_2_BATTERY_VOLT_CURR_TEMP_3_NAME "Battery_VoltCurrTemp_3"
#define BATTERIES_GPS_MOTOR_2_BATTERY_VOLT_CURR_TEMP_2_NAME "Battery_VoltCurrTemp_2"
#define BATTERIES_GPS_MOTOR_2_BATTERY_VOLT_CURR_TEMP_1_NAME "Battery_VoltCurrTemp_1"
#define BATTERIES_GPS_MOTOR_2_SOC_SOH_4_NAME "SOC_SOH_4"
#define BATTERIES_GPS_MOTOR_2_SOC_SOH_3_NAME "SOC_SOH_3"
#define BATTERIES_GPS_MOTOR_2_SOC_SOH_2_NAME "SOC_SOH_2"
#define BATTERIES_GPS_MOTOR_2_SOC_SOH_1_NAME "SOC_SOH_1"
#define BATTERIES_GPS_MOTOR_2_CHARGE_STATUS_4_NAME "charge_status_4"
#define BATTERIES_GPS_MOTOR_2_CHARGE_STATUS_3_NAME "charge_status_3"
#define BATTERIES_GPS_MOTOR_2_CHARGE_STATUS_2_NAME "charge_status_2"
#define BATTERIES_GPS_MOTOR_2_CHARGE_STATUS_1_NAME "charge_status_1"
#define BATTERIES_GPS_MOTOR_2_GNSS_STATUS_NAME "GnssStatus"
#define BATTERIES_GPS_MOTOR_2_GNSS_TIME_NAME "GnssTime"
#define BATTERIES_GPS_MOTOR_2_GNSS_POSITION_NAME "GnssPosition"
#define BATTERIES_GPS_MOTOR_2_GNSS_ALTITUDE_NAME "GnssAltitude"
#define BATTERIES_GPS_MOTOR_2_GNSS_ATTITUDE_NAME "GnssAttitude"
#define BATTERIES_GPS_MOTOR_2_GNSS_ODO_NAME "GnssOdo"
#define BATTERIES_GPS_MOTOR_2_GNSS_SPEED_NAME "GnssSpeed"
#define BATTERIES_GPS_MOTOR_2_GNSS_GEOFENCE_NAME "GnssGeofence"
#define BATTERIES_GPS_MOTOR_2_GNSS_IMU_NAME "GnssImu"
#define BATTERIES_GPS_MOTOR_2_ENGINE_PARAM_RAPID_UPDATE_NAME "Engine_Param_Rapid_Update"
#define BATTERIES_GPS_MOTOR_2_ELECTRIC_DRIVE_STATUS_NAME "Electric_Drive_Status"
#define BATTERIES_GPS_MOTOR_2_ELECTRIC_ENERGY_STORAGE_STATUSE_NAME "Electric_Energy_Storage_Statuse"
#define BATTERIES_GPS_MOTOR_2_ENGINE_PARAM_DYNAMIC_NAME "Engine_Param_Dynamic"
#define BATTERIES_GPS_MOTOR_2_ELECTRIC_DRIVE_INFO_NAME "Electric_Drive_Info"
#define BATTERIES_GPS_MOTOR_2_ELECTRIC_DRIVE_STATUS_RAPID_UP_NAME "Electric_Drive_Status_Rapid_Up"
#define BATTERIES_GPS_MOTOR_2_COG_AND_SOG_NAME "COG_and_SOG"

/* Signal Names. */
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_4_GENERAL_ALARM_4_NAME "General_Alarm_4"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_4_BATTERY_HIGH_VOLTAGE_ALARM_4_NAME "Battery_High_Voltage_Alarm_4"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_4_BATTERY_LOW_VOLTAGE_ALARM_4_NAME "Battery_Low_Voltage_Alarm_4"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_4_BATTERY_HIGH_TEMPERATURE_ALARM_4_NAME "Battery_High_Temperature_Alarm_4"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_4_BATTERY_LOW_TEMPERATURE_ALARM_4_NAME "Battery_Low_Temperature_Alarm_4"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_4_BATTERY_HIGH_TEMP_CHARGE_ALARM_4_NAME "Battery_High_Temp_Charge_Alarm_4"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_4_BATTERY_LOW_TEMP_CHARGE_ALARM_4_NAME "Battery_Low_Temp_Charge_Alarm_4"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_4_BATTERY_HIGH_CURRENT_ALARM_4_NAME "Battery_High_Current_Alarm_4"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_4_BATTERY_HIGH_CHARGE_CURR_ALARM_4_NAME "Battery_High_Charge_Curr_Alarm_4"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_4_CONTACTOR_ALARM_4_NAME "Contactor_Alarm_4"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_4_SHORT_CIRCUIT_ALARM_4_NAME "Short_Circuit_Alarm_4"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_4_BMS_INTERNAL_ALARM_4_NAME "BMS_Internal_Alarm_4"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_4_CELL_IMBALANCE_ALARM_4_NAME "Cell_Imbalance_Alarm_4"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_4_GENERAL_WARNING_4_NAME "General_Warning_4"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_4_BATTERY_HIGH_VOLTAGE_WARNING_4_NAME "Battery_High_Voltage_Warning_4"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_4_BATTERY_LOW_VOLTAGE_WARNING_4_NAME "Battery_Low_Voltage_Warning_4"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_4_BATTERY_HIGH_TEMP_WARNING_4_NAME "Battery_High_Temp_Warning_4"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_4_BATTERY_LOW_TEMP_WARNING_4_NAME "Battery_Low_Temp_Warning_4"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_4_BATTERY_HIGH_TEMP_CHARGE_WARN_4_NAME "Battery_High_Temp_Charge_Warn_4"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_4_BATTERY_LOW_TEMP_CHARGE_WARN_4_NAME "Battery_Low_Temp_Charge_Warn_4"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_4_BATTERY_HIGH_CURRENT_WARNING_4_NAME "Battery_High_Current_Warning_4"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_4_BATTERY_HIGH_CHARGE_CURR_WARN_4_NAME "Battery_High_Charge_Curr_Warn_4"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_4_CONTACTOR_WARNING_4_NAME "Contactor_Warning_4"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_4_SHORT_CIRCUIT_WARNING_4_NAME "Short_Circuit_Warning_4"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_4_BMS_INTERNAL_WARNING_4_NAME "BMS_Internal_Warning_4"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_4_CELL_IMBALANCE_WARNING_4_NAME "Cell_Imbalance_Warning_4"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_4_SYSTEM_STATUS_4_NAME "System_Status_4"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_3_GENERAL_ALARM_3_NAME "General_Alarm_3"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_3_BATTERY_HIGH_VOLTAGE_ALARM_3_NAME "Battery_High_Voltage_Alarm_3"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_3_BATTERY_LOW_VOLTAGE_ALARM_3_NAME "Battery_Low_Voltage_Alarm_3"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_3_BATTERY_HIGH_TEMPERATURE_ALARM_3_NAME "Battery_High_Temperature_Alarm_3"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_3_BATTERY_LOW_TEMPERATURE_ALARM_3_NAME "Battery_Low_Temperature_Alarm_3"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_3_BATTERY_HIGH_TEMP_CHARGE_ALARM_3_NAME "Battery_High_Temp_Charge_Alarm_3"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_3_BATTERY_LOW_TEMP_CHARGE_ALARM_3_NAME "Battery_Low_Temp_Charge_Alarm_3"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_3_BATTERY_HIGH_CURRENT_ALARM_3_NAME "Battery_High_Current_Alarm_3"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_3_BATTERY_HIGH_CHARGE_CURR_ALARM_3_NAME "Battery_High_Charge_Curr_Alarm_3"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_3_CONTACTOR_ALARM_3_NAME "Contactor_Alarm_3"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_3_SHORT_CIRCUIT_ALARM_3_NAME "Short_Circuit_Alarm_3"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_3_BMS_INTERNAL_ALARM_3_NAME "BMS_Internal_Alarm_3"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_3_CELL_IMBALANCE_ALARM_3_NAME "Cell_Imbalance_Alarm_3"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_3_GENERAL_WARNING_3_NAME "General_Warning_3"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_3_BATTERY_HIGH_VOLTAGE_WARNING_3_NAME "Battery_High_Voltage_Warning_3"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_3_BATTERY_LOW_VOLTAGE_WARNING_3_NAME "Battery_Low_Voltage_Warning_3"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_3_BATTERY_HIGH_TEMP_WARNING_3_NAME "Battery_High_Temp_Warning_3"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_3_BATTERY_LOW_TEMP_WARNING_3_NAME "Battery_Low_Temp_Warning_3"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_3_BATTERY_HIGH_TEMP_CHARGE_WARN_3_NAME "Battery_High_Temp_Charge_Warn_3"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_3_BATTERY_LOW_TEMP_CHARGE_WARN_3_NAME "Battery_Low_Temp_Charge_Warn_3"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_3_BATTERY_HIGH_CURRENT_WARNING_3_NAME "Battery_High_Current_Warning_3"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_3_BATTERY_HIGH_CHARGE_CURR_WARN_3_NAME "Battery_High_Charge_Curr_Warn_3"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_3_CONTACTOR_WARNING_3_NAME "Contactor_Warning_3"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_3_SHORT_CIRCUIT_WARNING_3_NAME "Short_Circuit_Warning_3"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_3_BMS_INTERNAL_WARNING_3_NAME "BMS_Internal_Warning_3"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_3_CELL_IMBALANCE_WARNING_3_NAME "Cell_Imbalance_Warning_3"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_3_SYSTEM_STATUS_3_NAME "System_Status_3"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_2_GENERAL_ALARM_2_NAME "General_Alarm_2"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_2_BATTERY_HIGH_VOLTAGE_ALARM_2_NAME "Battery_High_Voltage_Alarm_2"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_2_BATTERY_LOW_VOLTAGE_ALARM_2_NAME "Battery_Low_Voltage_Alarm_2"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_2_BATTERY_HIGH_TEMPERATURE_ALARM_2_NAME "Battery_High_Temperature_Alarm_2"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_2_BATTERY_LOW_TEMPERATURE_ALARM_2_NAME "Battery_Low_Temperature_Alarm_2"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_2_BATTERY_HIGH_TEMP_CHARGE_ALARM_2_NAME "Battery_High_Temp_Charge_Alarm_2"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_2_BATTERY_LOW_TEMP_CHARGE_ALARM_2_NAME "Battery_Low_Temp_Charge_Alarm_2"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_2_BATTERY_HIGH_CURRENT_ALARM_2_NAME "Battery_High_Current_Alarm_2"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_2_BATTERY_HIGH_CHARGE_CURR_ALARM_2_NAME "Battery_High_Charge_Curr_Alarm_2"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_2_CONTACTOR_ALARM_2_NAME "Contactor_Alarm_2"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_2_SHORT_CIRCUIT_ALARM_2_NAME "Short_Circuit_Alarm_2"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_2_BMS_INTERNAL_ALARM_2_NAME "BMS_Internal_Alarm_2"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_2_CELL_IMBALANCE_ALARM_2_NAME "Cell_Imbalance_Alarm_2"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_2_GENERAL_WARNING_2_NAME "General_Warning_2"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_2_BATTERY_HIGH_VOLTAGE_WARNING_2_NAME "Battery_High_Voltage_Warning_2"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_2_BATTERY_LOW_VOLTAGE_WARNING_2_NAME "Battery_Low_Voltage_Warning_2"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_2_BATTERY_HIGH_TEMP_WARNING_2_NAME "Battery_High_Temp_Warning_2"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_2_BATTERY_LOW_TEMP_WARNING_2_NAME "Battery_Low_Temp_Warning_2"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_2_BATTERY_HIGH_TEMP_CHARGE_WARN_2_NAME "Battery_High_Temp_Charge_Warn_2"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_2_BATTERY_LOW_TEMP_CHARGE_WARN_2_NAME "Battery_Low_Temp_Charge_Warn_2"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_2_BATTERY_HIGH_CURRENT_WARNING_2_NAME "Battery_High_Current_Warning_2"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_2_BATTERY_HIGH_CHARGE_CURR_WARN_2_NAME "Battery_High_Charge_Curr_Warn_2"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_2_CONTACTOR_WARNING_2_NAME "Contactor_Warning_2"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_2_SHORT_CIRCUIT_WARNING_2_NAME "Short_Circuit_Warning_2"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_2_BMS_INTERNAL_WARNING_2_NAME "BMS_Internal_Warning_2"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_2_CELL_IMBALANCE_WARNING_2_NAME "Cell_Imbalance_Warning_2"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_2_SYSTEM_STATUS_2_NAME "System_Status_2"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_1_GENERAL_ALARM_1_NAME "General_Alarm_1"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_1_BATTERY_HIGH_VOLTAGE_ALARM_1_NAME "Battery_High_Voltage_Alarm_1"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_1_BATTERY_LOW_VOLTAGE_ALARM_1_NAME "Battery_Low_Voltage_Alarm_1"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_1_BATTERY_HIGH_TEMPERATURE_ALARM_1_NAME "Battery_High_Temperature_Alarm_1"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_1_BATTERY_LOW_TEMPERATURE_ALARM_1_NAME "Battery_Low_Temperature_Alarm_1"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_1_BATTERY_HIGH_TEMP_CHARGE_ALARM_1_NAME "Battery_High_Temp_Charge_Alarm_1"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_1_BATTERY_LOW_TEMP_CHARGE_ALARM_1_NAME "Battery_Low_Temp_Charge_Alarm_1"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_1_BATTERY_HIGH_CURRENT_ALARM_1_NAME "Battery_High_Current_Alarm_1"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_1_BATTERY_HIGH_CHARGE_CURR_ALARM_1_NAME "Battery_High_Charge_Curr_Alarm_1"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_1_CONTACTOR_ALARM_1_NAME "Contactor_Alarm_1"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_1_SHORT_CIRCUIT_ALARM_1_NAME "Short_Circuit_Alarm_1"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_1_BMS_INTERNAL_ALARM_1_NAME "BMS_Internal_Alarm_1"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_1_CELL_IMBALANCE_ALARM_1_NAME "Cell_Imbalance_Alarm_1"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_1_GENERAL_WARNING_1_NAME "General_Warning_1"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_1_BATTERY_HIGH_VOLTAGE_WARNING_1_NAME "Battery_High_Voltage_Warning_1"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_1_BATTERY_LOW_VOLTAGE_WARNING_1_NAME "Battery_Low_Voltage_Warning_1"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_1_BATTERY_HIGH_TEMP_WARNING_1_NAME "Battery_High_Temp_Warning_1"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_1_BATTERY_LOW_TEMP_WARNING_1_NAME "Battery_Low_Temp_Warning_1"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_1_BATTERY_HIGH_TEMP_CHARGE_WARN_1_NAME "Battery_High_Temp_Charge_Warn_1"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_1_BATTERY_LOW_TEMP_CHARGE_WARN_1_NAME "Battery_Low_Temp_Charge_Warn_1"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_1_BATTERY_HIGH_CURRENT_WARNING_1_NAME "Battery_High_Current_Warning_1"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_1_BATTERY_HIGH_CHARGE_CURR_WARN_1_NAME "Battery_High_Charge_Curr_Warn_1"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_1_CONTACTOR_WARNING_1_NAME "Contactor_Warning_1"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_1_SHORT_CIRCUIT_WARNING_1_NAME "Short_Circuit_Warning_1"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_1_BMS_INTERNAL_WARNING_1_NAME "BMS_Internal_Warning_1"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_1_CELL_IMBALANCE_WARNING_1_NAME "Cell_Imbalance_Warning_1"
#define BATTERIES_GPS_MOTOR_2_EXTRA_BATTERY_INFO_1_SYSTEM_STATUS_1_NAME "System_Status_1"
#define BATTERIES_GPS_MOTOR_2_BATTERY_VOLT_CURR_TEMP_4_BATTERY_VOLTAGE_4_NAME "BatteryVoltage_4"
#define BATTERIES_GPS_MOTOR_2_BATTERY_VOLT_CURR_TEMP_4_BATTERY_CURRENT_4_NAME "BatteryCurrent_4"
#define BATTERIES_GPS_MOTOR_2_BATTERY_VOLT_CURR_TEMP_4_BATTERY_TEMP_4_NAME "BatteryTemp_4"
#define BATTERIES_GPS_MOTOR_2_BATTERY_VOLT_CURR_TEMP_3_BATTERY_VOLTAGE_3_NAME "BatteryVoltage_3"
#define BATTERIES_GPS_MOTOR_2_BATTERY_VOLT_CURR_TEMP_3_BATTERY_CURRENT_3_NAME "BatteryCurrent_3"
#define BATTERIES_GPS_MOTOR_2_BATTERY_VOLT_CURR_TEMP_3_BATTERY_TEMP_3_NAME "BatteryTemp_3"
#define BATTERIES_GPS_MOTOR_2_BATTERY_VOLT_CURR_TEMP_2_BATTERY_VOLTAGE_2_NAME "BatteryVoltage_2"
#define BATTERIES_GPS_MOTOR_2_BATTERY_VOLT_CURR_TEMP_2_BATTERY_CURRENT_2_NAME "BatteryCurrent_2"
#define BATTERIES_GPS_MOTOR_2_BATTERY_VOLT_CURR_TEMP_2_BATTERY_TEMP_2_NAME "BatteryTemp_2"
#define BATTERIES_GPS_MOTOR_2_BATTERY_VOLT_CURR_TEMP_1_BATTERY_VOLTAGE_1_NAME "BatteryVoltage_1"
#define BATTERIES_GPS_MOTOR_2_BATTERY_VOLT_CURR_TEMP_1_BATTERY_CURRENT_1_NAME "BatteryCurrent_1"
#define BATTERIES_GPS_MOTOR_2_BATTERY_VOLT_CURR_TEMP_1_BATTERY_TEMP_1_NAME "BatteryTemp_1"
#define BATTERIES_GPS_MOTOR_2_SOC_SOH_4_SOC_VALUE_4_NAME "SOC_Value_4"
#define BATTERIES_GPS_MOTOR_2_SOC_SOH_4_SOH_VALUE_4_NAME "SOH_Value_4"
#define BATTERIES_GPS_MOTOR_2_SOC_SOH_4_HIGH_RES_SOC_4_NAME "High_Res_SOC_4"
#define BATTERIES_GPS_MOTOR_2_SOC_SOH_3_SOC_VALUE_3_NAME "SOC_Value_3"
#define BATTERIES_GPS_MOTOR_2_SOC_SOH_3_SOH_VALUE_3_NAME "SOH_Value_3"
#define BATTERIES_GPS_MOTOR_2_SOC_SOH_3_HIGH_RES_SOC_3_NAME "High_Res_SOC_3"
#define BATTERIES_GPS_MOTOR_2_SOC_SOH_2_SOC_VALUE_2_NAME "SOC_Value_2"
#define BATTERIES_GPS_MOTOR_2_SOC_SOH_2_SOH_VALUE_2_NAME "SOH_Value_2"
#define BATTERIES_GPS_MOTOR_2_SOC_SOH_2_HIGH_RES_SOC_2_NAME "High_Res_SOC_2"
#define BATTERIES_GPS_MOTOR_2_SOC_SOH_1_SOC_VALUE_1_NAME "SOC_Value_1"
#define BATTERIES_GPS_MOTOR_2_SOC_SOH_1_SOH_VALUE_1_NAME "SOH_Value_1"
#define BATTERIES_GPS_MOTOR_2_SOC_SOH_1_HIGH_RES_SOC_1_NAME "High_Res_SOC_1"
#define BATTERIES_GPS_MOTOR_2_CHARGE_STATUS_4_CHARGE_VOLTAGE_LIMIT_4_NAME "ChargeVoltageLimit_4"
#define BATTERIES_GPS_MOTOR_2_CHARGE_STATUS_4_MAX_CHARGE_CURRENT_4_NAME "MaxChargeCurrent_4"
#define BATTERIES_GPS_MOTOR_2_CHARGE_STATUS_4_MAX_DISCHARGE_CURRENT_4_NAME "MaxDischargeCurrent_4"
#define BATTERIES_GPS_MOTOR_2_CHARGE_STATUS_4_DISCHARGE_VOLTAGE_4_NAME "DischargeVoltage_4"
#define BATTERIES_GPS_MOTOR_2_CHARGE_STATUS_3_CHARGE_VOLTAGE_LIMIT_3_NAME "ChargeVoltageLimit_3"
#define BATTERIES_GPS_MOTOR_2_CHARGE_STATUS_3_MAX_CHARGE_CURRENT_3_NAME "MaxChargeCurrent_3"
#define BATTERIES_GPS_MOTOR_2_CHARGE_STATUS_3_MAX_DISCHARGE_CURRENT_3_NAME "MaxDischargeCurrent_3"
#define BATTERIES_GPS_MOTOR_2_CHARGE_STATUS_3_DISCHARGE_VOLTAGE_3_NAME "DischargeVoltage_3"
#define BATTERIES_GPS_MOTOR_2_CHARGE_STATUS_2_CHARGE_VOLTAGE_LIMIT_2_NAME "ChargeVoltageLimit_2"
#define BATTERIES_GPS_MOTOR_2_CHARGE_STATUS_2_MAX_CHARGE_CURRENT_2_NAME "MaxChargeCurrent_2"
#define BATTERIES_GPS_MOTOR_2_CHARGE_STATUS_2_MAX_DISCHARGE_CURRENT_2_NAME "MaxDischargeCurrent_2"
#define BATTERIES_GPS_MOTOR_2_CHARGE_STATUS_2_DISCHARGE_VOLTAGE_2_NAME "DischargeVoltage_2"
#define BATTERIES_GPS_MOTOR_2_CHARGE_STATUS_1_CHARGE_VOLTAGE_LIMIT_1_NAME "ChargeVoltageLimit_1"
#define BATTERIES_GPS_MOTOR_2_CHARGE_STATUS_1_MAX_CHARGE_CURRENT_1_NAME "MaxChargeCurrent_1"
#define BATTERIES_GPS_MOTOR_2_CHARGE_STATUS_1_MAX_DISCHARGE_CURRENT_1_NAME "MaxDischargeCurrent_1"
#define BATTERIES_GPS_MOTOR_2_CHARGE_STATUS_1_DISCHARGE_VOLTAGE_1_NAME "DischargeVoltage_1"
#define BATTERIES_GPS_MOTOR_2_GNSS_STATUS_FIX_TYPE_NAME "FixType"
#define BATTERIES_GPS_MOTOR_2_GNSS_STATUS_SATELLITES_NAME "Satellites"
#define BATTERIES_GPS_MOTOR_2_GNSS_TIME_TIME_VALID_NAME "TimeValid"
#define BATTERIES_GPS_MOTOR_2_GNSS_TIME_TIME_CONFIRMED_NAME "TimeConfirmed"
#define BATTERIES_GPS_MOTOR_2_GNSS_TIME_EPOCH_NAME "Epoch"
#define BATTERIES_GPS_MOTOR_2_GNSS_POSITION_POSITION_VALID_NAME "PositionValid"
#define BATTERIES_GPS_MOTOR_2_GNSS_POSITION_LATITUDE_NAME "Latitude"
#define BATTERIES_GPS_MOTOR_2_GNSS_POSITION_LONGITUDE_NAME "Longitude"
#define BATTERIES_GPS_MOTOR_2_GNSS_POSITION_POSITION_ACCURACY_NAME "PositionAccuracy"
#define BATTERIES_GPS_MOTOR_2_GNSS_ALTITUDE_ALTITUDE_VALID_NAME "AltitudeValid"
#define BATTERIES_GPS_MOTOR_2_GNSS_ALTITUDE_ALTITUDE_NAME "Altitude"
#define BATTERIES_GPS_MOTOR_2_GNSS_ALTITUDE_ALTITUDE_ACCURACY_NAME "AltitudeAccuracy"
#define BATTERIES_GPS_MOTOR_2_GNSS_ATTITUDE_ATTITUDE_VALID_NAME "AttitudeValid"
#define BATTERIES_GPS_MOTOR_2_GNSS_ATTITUDE_ROLL_NAME "Roll"
#define BATTERIES_GPS_MOTOR_2_GNSS_ATTITUDE_ROLL_ACCURACY_NAME "RollAccuracy"
#define BATTERIES_GPS_MOTOR_2_GNSS_ATTITUDE_PITCH_NAME "Pitch"
#define BATTERIES_GPS_MOTOR_2_GNSS_ATTITUDE_PITCH_ACCURACY_NAME "PitchAccuracy"
#define BATTERIES_GPS_MOTOR_2_GNSS_ATTITUDE_HEADING_NAME "Heading"
#define BATTERIES_GPS_MOTOR_2_GNSS_ATTITUDE_HEADING_ACCURACY_NAME "HeadingAccuracy"
#define BATTERIES_GPS_MOTOR_2_GNSS_ODO_DISTANCE_VALID_NAME "DistanceValid"
#define BATTERIES_GPS_MOTOR_2_GNSS_ODO_DISTANCE_TRIP_NAME "DistanceTrip"
#define BATTERIES_GPS_MOTOR_2_GNSS_ODO_DISTANCE_ACCURACY_NAME "DistanceAccuracy"
#define BATTERIES_GPS_MOTOR_2_GNSS_ODO_DISTANCE_TOTAL_NAME "DistanceTotal"
#define BATTERIES_GPS_MOTOR_2_GNSS_SPEED_SPEED_VALID_NAME "SpeedValid"
#define BATTERIES_GPS_MOTOR_2_GNSS_SPEED_SPEED_NAME "Speed"
#define BATTERIES_GPS_MOTOR_2_GNSS_SPEED_SPEED_ACCURACY_NAME "SpeedAccuracy"
#define BATTERIES_GPS_MOTOR_2_GNSS_GEOFENCE_FENCE_VALID_NAME "FenceValid"
#define BATTERIES_GPS_MOTOR_2_GNSS_GEOFENCE_FENCE_COMBINED_NAME "FenceCombined"
#define BATTERIES_GPS_MOTOR_2_GNSS_GEOFENCE_FENCE1_NAME "Fence1"
#define BATTERIES_GPS_MOTOR_2_GNSS_GEOFENCE_FENCE2_NAME "Fence2"
#define BATTERIES_GPS_MOTOR_2_GNSS_GEOFENCE_FENCE3_NAME "Fence3"
#define BATTERIES_GPS_MOTOR_2_GNSS_GEOFENCE_FENCE4_NAME "Fence4"
#define BATTERIES_GPS_MOTOR_2_GNSS_IMU_IMU_VALID_NAME "ImuValid"
#define BATTERIES_GPS_MOTOR_2_GNSS_IMU_ACCELERATION_X_NAME "AccelerationX"
#define BATTERIES_GPS_MOTOR_2_GNSS_IMU_ACCELERATION_Y_NAME "AccelerationY"
#define BATTERIES_GPS_MOTOR_2_GNSS_IMU_ACCELERATION_Z_NAME "AccelerationZ"
#define BATTERIES_GPS_MOTOR_2_GNSS_IMU_ANGULAR_RATE_X_NAME "AngularRateX"
#define BATTERIES_GPS_MOTOR_2_GNSS_IMU_ANGULAR_RATE_Y_NAME "AngularRateY"
#define BATTERIES_GPS_MOTOR_2_GNSS_IMU_ANGULAR_RATE_Z_NAME "AngularRateZ"
#define BATTERIES_GPS_MOTOR_2_ENGINE_PARAM_RAPID_UPDATE_MOTOR_SPEED_NAME "Motor_Speed"
#define BATTERIES_GPS_MOTOR_2_ELECTRIC_DRIVE_STATUS_MOTOR_TEMPERATURE_NAME "Motor_Temperature"
#define BATTERIES_GPS_MOTOR_2_ELECTRIC_ENERGY_STORAGE_STATUSE_STATE_OF_CHARGE_NAME "State_Of_Charge"
#define BATTERIES_GPS_MOTOR_2_ELECTRIC_ENERGY_STORAGE_STATUSE_TIME_REMAINING_NAME "Time_Remaining"
#define BATTERIES_GPS_MOTOR_2_ENGINE_PARAM_DYNAMIC_ENGINE_TEMP_NAME "Engine_Temp"
#define BATTERIES_GPS_MOTOR_2_ELECTRIC_DRIVE_INFO_MOTOR_ID_NAME "Motor_ID"
#define BATTERIES_GPS_MOTOR_2_ELECTRIC_DRIVE_INFO_MOTOR_TYPE_NAME "Motor_Type"
#define BATTERIES_GPS_MOTOR_2_ELECTRIC_DRIVE_INFO_MOTOR_VOLTAGE_RATING_NAME "Motor_Voltage_Rating"
#define BATTERIES_GPS_MOTOR_2_ELECTRIC_DRIVE_INFO_MAX_CONT_MOTOR_POWER_NAME "Max_Cont_Motor_Power"
#define BATTERIES_GPS_MOTOR_2_ELECTRIC_DRIVE_INFO_MAX_BOOST_MOTOR_POWER_NAME "Max_Boost_Motor_Power"
#define BATTERIES_GPS_MOTOR_2_ELECTRIC_DRIVE_INFO_MAX_MOTOR_TEMP_RATING_NAME "Max_Motor_Temp_Rating"
#define BATTERIES_GPS_MOTOR_2_ELECTRIC_DRIVE_INFO_RATED_MOTOR_SPEED_NAME "Rated_Motor_Speed"
#define BATTERIES_GPS_MOTOR_2_ELECTRIC_DRIVE_INFO_MAX_CONTROLLER_TEMP_RATING_NAME "Max_Controller_Temp_Rating"
#define BATTERIES_GPS_MOTOR_2_ELECTRIC_DRIVE_INFO_MOTOR_SHAFT_TORQUE_RATING_NAME "Motor_Shaft_Torque_Rating"
#define BATTERIES_GPS_MOTOR_2_ELECTRIC_DRIVE_INFO_MOTOR_DC_VOLT_DERATING_THRESHOLD_NAME "Motor_DC_Volt_Derating_Threshold"
#define BATTERIES_GPS_MOTOR_2_ELECTRIC_DRIVE_INFO_MOTOR_DC_VOLT_CUT_OFF_THRESHOLD_NAME "Motor_DC_Volt_CutOff_Threshold"
#define BATTERIES_GPS_MOTOR_2_ELECTRIC_DRIVE_INFO_MOTOR_HOURS_NAME "Motor_Hours"
#define BATTERIES_GPS_MOTOR_2_ELECTRIC_DRIVE_STATUS_RAPID_UP_MOTOR_DC_VOLTAGE_NAME "Motor_DC_Voltage"
#define BATTERIES_GPS_MOTOR_2_ELECTRIC_DRIVE_STATUS_RAPID_UP_MOTOR_DC_CURRENT_NAME "Motor_DC_Current"
#define BATTERIES_GPS_MOTOR_2_COG_AND_SOG_COG_NAME "COG"
#define BATTERIES_GPS_MOTOR_2_COG_AND_SOG_SOG_NAME "SOG"

/**
 * Signals in message extra_battery_info_4.
 *
 * All signal values are as on the CAN bus.
 */
struct batteries_gps_motor_2_extra_battery_info_4_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t general_alarm_4;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t battery_high_voltage_alarm_4;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t battery_low_voltage_alarm_4;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t battery_high_temperature_alarm_4;

    /**
     * Range: -
     * Scale: 1
     * Offset: 1
     */
    uint8_t battery_low_temperature_alarm_4;

    /**
     * Range: -
     * Scale: 1
     * Offset: 1
     */
    uint8_t battery_high_temp_charge_alarm_4;

    /**
     * Range: -
     * Scale: 1
     * Offset: 1
     */
    uint8_t battery_low_temp_charge_alarm_4;

    /**
     * Range: -
     * Scale: 1
     * Offset: 1
     */
    uint8_t battery_high_current_alarm_4;

    /**
     * Range: -
     * Scale: 1
     * Offset: 2
     */
    uint8_t battery_high_charge_curr_alarm_4;

    /**
     * Range: -
     * Scale: 1
     * Offset: 2
     */
    uint8_t contactor_alarm_4;

    /**
     * Range: -
     * Scale: 1
     * Offset: 2
     */
    uint8_t short_circuit_alarm_4;

    /**
     * Range: -
     * Scale: 1
     * Offset: 2
     */
    uint8_t bms_internal_alarm_4;

    /**
     * Range: -
     * Scale: 1
     * Offset: 3
     */
    uint8_t cell_imbalance_alarm_4;

    /**
     * Range: -
     * Scale: 1
     * Offset: 4
     */
    uint8_t general_warning_4;

    /**
     * Range: -
     * Scale: 1
     * Offset: 4
     */
    uint8_t battery_high_voltage_warning_4;

    /**
     * Range: -
     * Scale: 1
     * Offset: 4
     */
    uint8_t battery_low_voltage_warning_4;

    /**
     * Range: -
     * Scale: 1
     * Offset: 4
     */
    uint8_t battery_high_temp_warning_4;

    /**
     * Range: -
     * Scale: 1
     * Offset: 5
     */
    uint8_t battery_low_temp_warning_4;

    /**
     * Range: -
     * Scale: 1
     * Offset: 5
     */
    uint8_t battery_high_temp_charge_warn_4;

    /**
     * Range: -
     * Scale: 1
     * Offset: 5
     */
    uint8_t battery_low_temp_charge_warn_4;

    /**
     * Range: -
     * Scale: 1
     * Offset: 5
     */
    uint8_t battery_high_current_warning_4;

    /**
     * Range: -
     * Scale: 1
     * Offset: 6
     */
    uint8_t battery_high_charge_curr_warn_4;

    /**
     * Range: -
     * Scale: 1
     * Offset: 6
     */
    uint8_t contactor_warning_4;

    /**
     * Range: -
     * Scale: 1
     * Offset: 6
     */
    uint8_t short_circuit_warning_4;

    /**
     * Range: -
     * Scale: 1
     * Offset: 6
     */
    uint8_t bms_internal_warning_4;

    /**
     * Range: -
     * Scale: 1
     * Offset: 7
     */
    uint8_t cell_imbalance_warning_4;

    /**
     * Range: -
     * Scale: 1
     * Offset: 7
     */
    uint8_t system_status_4;
};

/**
 * Signals in message extra_battery_info_3.
 *
 * All signal values are as on the CAN bus.
 */
struct batteries_gps_motor_2_extra_battery_info_3_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t general_alarm_3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t battery_high_voltage_alarm_3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t battery_low_voltage_alarm_3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t battery_high_temperature_alarm_3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 1
     */
    uint8_t battery_low_temperature_alarm_3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 1
     */
    uint8_t battery_high_temp_charge_alarm_3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 1
     */
    uint8_t battery_low_temp_charge_alarm_3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 1
     */
    uint8_t battery_high_current_alarm_3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 2
     */
    uint8_t battery_high_charge_curr_alarm_3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 2
     */
    uint8_t contactor_alarm_3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 2
     */
    uint8_t short_circuit_alarm_3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 2
     */
    uint8_t bms_internal_alarm_3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 3
     */
    uint8_t cell_imbalance_alarm_3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 4
     */
    uint8_t general_warning_3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 4
     */
    uint8_t battery_high_voltage_warning_3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 4
     */
    uint8_t battery_low_voltage_warning_3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 4
     */
    uint8_t battery_high_temp_warning_3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 5
     */
    uint8_t battery_low_temp_warning_3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 5
     */
    uint8_t battery_high_temp_charge_warn_3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 5
     */
    uint8_t battery_low_temp_charge_warn_3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 5
     */
    uint8_t battery_high_current_warning_3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 6
     */
    uint8_t battery_high_charge_curr_warn_3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 6
     */
    uint8_t contactor_warning_3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 6
     */
    uint8_t short_circuit_warning_3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 6
     */
    uint8_t bms_internal_warning_3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 7
     */
    uint8_t cell_imbalance_warning_3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 7
     */
    uint8_t system_status_3;
};

/**
 * Signals in message extra_battery_info_2.
 *
 * All signal values are as on the CAN bus.
 */
struct batteries_gps_motor_2_extra_battery_info_2_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t general_alarm_2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t battery_high_voltage_alarm_2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t battery_low_voltage_alarm_2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t battery_high_temperature_alarm_2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 1
     */
    uint8_t battery_low_temperature_alarm_2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 1
     */
    uint8_t battery_high_temp_charge_alarm_2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 1
     */
    uint8_t battery_low_temp_charge_alarm_2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 1
     */
    uint8_t battery_high_current_alarm_2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 2
     */
    uint8_t battery_high_charge_curr_alarm_2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 2
     */
    uint8_t contactor_alarm_2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 2
     */
    uint8_t short_circuit_alarm_2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 2
     */
    uint8_t bms_internal_alarm_2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 3
     */
    uint8_t cell_imbalance_alarm_2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 4
     */
    uint8_t general_warning_2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 4
     */
    uint8_t battery_high_voltage_warning_2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 4
     */
    uint8_t battery_low_voltage_warning_2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 4
     */
    uint8_t battery_high_temp_warning_2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 5
     */
    uint8_t battery_low_temp_warning_2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 5
     */
    uint8_t battery_high_temp_charge_warn_2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 5
     */
    uint8_t battery_low_temp_charge_warn_2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 5
     */
    uint8_t battery_high_current_warning_2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 6
     */
    uint8_t battery_high_charge_curr_warn_2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 6
     */
    uint8_t contactor_warning_2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 6
     */
    uint8_t short_circuit_warning_2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 6
     */
    uint8_t bms_internal_warning_2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 7
     */
    uint8_t cell_imbalance_warning_2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 7
     */
    uint8_t system_status_2;
};

/**
 * Signals in message extra_battery_info_1.
 *
 * All signal values are as on the CAN bus.
 */
struct batteries_gps_motor_2_extra_battery_info_1_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t general_alarm_1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t battery_high_voltage_alarm_1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t battery_low_voltage_alarm_1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t battery_high_temperature_alarm_1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 1
     */
    uint8_t battery_low_temperature_alarm_1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 1
     */
    uint8_t battery_high_temp_charge_alarm_1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 1
     */
    uint8_t battery_low_temp_charge_alarm_1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 1
     */
    uint8_t battery_high_current_alarm_1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 2
     */
    uint8_t battery_high_charge_curr_alarm_1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 2
     */
    uint8_t contactor_alarm_1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 2
     */
    uint8_t short_circuit_alarm_1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 2
     */
    uint8_t bms_internal_alarm_1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 3
     */
    uint8_t cell_imbalance_alarm_1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 4
     */
    uint8_t general_warning_1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 4
     */
    uint8_t battery_high_voltage_warning_1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 4
     */
    uint8_t battery_low_voltage_warning_1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 4
     */
    uint8_t battery_high_temp_warning_1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 5
     */
    uint8_t battery_low_temp_warning_1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 5
     */
    uint8_t battery_high_temp_charge_warn_1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 5
     */
    uint8_t battery_low_temp_charge_warn_1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 5
     */
    uint8_t battery_high_current_warning_1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 6
     */
    uint8_t battery_high_charge_curr_warn_1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 6
     */
    uint8_t contactor_warning_1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 6
     */
    uint8_t short_circuit_warning_1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 6
     */
    uint8_t bms_internal_warning_1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 7
     */
    uint8_t cell_imbalance_warning_1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 7
     */
    uint8_t system_status_1;
};

/**
 * Signals in message Battery_VoltCurrTemp_4.
 *
 * All signal values are as on the CAN bus.
 */
struct batteries_gps_motor_2_battery_volt_curr_temp_4_t {
    /**
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    int16_t battery_voltage_4;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t battery_current_4;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t battery_temp_4;
};

/**
 * Signals in message Battery_VoltCurrTemp_3.
 *
 * All signal values are as on the CAN bus.
 */
struct batteries_gps_motor_2_battery_volt_curr_temp_3_t {
    /**
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    int16_t battery_voltage_3;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t battery_current_3;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t battery_temp_3;
};

/**
 * Signals in message Battery_VoltCurrTemp_2.
 *
 * All signal values are as on the CAN bus.
 */
struct batteries_gps_motor_2_battery_volt_curr_temp_2_t {
    /**
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    int16_t battery_voltage_2;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t battery_current_2;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t battery_temp_2;
};

/**
 * Signals in message Battery_VoltCurrTemp_1.
 *
 * All signal values are as on the CAN bus.
 */
struct batteries_gps_motor_2_battery_volt_curr_temp_1_t {
    /**
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    int16_t battery_voltage_1;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t battery_current_1;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t battery_temp_1;
};

/**
 * Signals in message SOC_SOH_4.
 *
 * All signal values are as on the CAN bus.
 */
struct batteries_gps_motor_2_soc_soh_4_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t soc_value_4;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t soh_value_4;

    /**
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t high_res_soc_4;
};

/**
 * Signals in message SOC_SOH_3.
 *
 * All signal values are as on the CAN bus.
 */
struct batteries_gps_motor_2_soc_soh_3_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t soc_value_3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t soh_value_3;

    /**
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t high_res_soc_3;
};

/**
 * Signals in message SOC_SOH_2.
 *
 * All signal values are as on the CAN bus.
 */
struct batteries_gps_motor_2_soc_soh_2_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t soc_value_2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t soh_value_2;

    /**
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t high_res_soc_2;
};

/**
 * Signals in message SOC_SOH_1.
 *
 * All signal values are as on the CAN bus.
 */
struct batteries_gps_motor_2_soc_soh_1_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t soc_value_1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t soh_value_1;

    /**
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t high_res_soc_1;
};

/**
 * Signals in message charge_status_4.
 *
 * All signal values are as on the CAN bus.
 */
struct batteries_gps_motor_2_charge_status_4_t {
    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t charge_voltage_limit_4;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t max_charge_current_4;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t max_discharge_current_4;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t discharge_voltage_4;
};

/**
 * Signals in message charge_status_3.
 *
 * All signal values are as on the CAN bus.
 */
struct batteries_gps_motor_2_charge_status_3_t {
    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t charge_voltage_limit_3;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t max_charge_current_3;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t max_discharge_current_3;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t discharge_voltage_3;
};

/**
 * Signals in message charge_status_2.
 *
 * All signal values are as on the CAN bus.
 */
struct batteries_gps_motor_2_charge_status_2_t {
    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t charge_voltage_limit_2;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t max_charge_current_2;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t max_discharge_current_2;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t discharge_voltage_2;
};

/**
 * Signals in message charge_status_1.
 *
 * All signal values are as on the CAN bus.
 */
struct batteries_gps_motor_2_charge_status_1_t {
    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t charge_voltage_limit_1;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t max_charge_current_1;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t max_discharge_current_1;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t discharge_voltage_1;
};

/**
 * Signals in message GnssStatus.
 *
 * All signal values are as on the CAN bus.
 */
struct batteries_gps_motor_2_gnss_status_t {
    /**
     * Range: 0..5 (0..5 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fix_type;

    /**
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t satellites;
};

/**
 * Signals in message GnssTime.
 *
 * All signal values are as on the CAN bus.
 */
struct batteries_gps_motor_2_gnss_time_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t time_valid;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t time_confirmed;

    /**
     * Range: -
     * Scale: 0.001
     * Offset: 1577840400
     */
    uint64_t epoch;
};

/**
 * Signals in message GnssPosition.
 *
 * All signal values are as on the CAN bus.
 */
struct batteries_gps_motor_2_gnss_position_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t position_valid;

    /**
     * Range: 0..180000000 (-90..90 deg)
     * Scale: 1e-06
     * Offset: -90
     */
    uint32_t latitude;

    /**
     * Range: 0..360000000 (-180..180 deg)
     * Scale: 1e-06
     * Offset: -180
     */
    uint32_t longitude;

    /**
     * Range: 0..63 (0..63 m)
     * Scale: 1
     * Offset: 0
     */
    uint8_t position_accuracy;
};

/**
 * Signals in message GnssAltitude.
 *
 * All signal values are as on the CAN bus.
 */
struct batteries_gps_motor_2_gnss_altitude_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t altitude_valid;

    /**
     * Range: 0..260000 (-6000..20000 m)
     * Scale: 0.1
     * Offset: -6000
     */
    uint32_t altitude;

    /**
     * Range: 0..8000 (0..8000 m)
     * Scale: 1
     * Offset: 0
     */
    uint16_t altitude_accuracy;
};

/**
 * Signals in message GnssAttitude.
 *
 * All signal values are as on the CAN bus.
 */
struct batteries_gps_motor_2_gnss_attitude_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t attitude_valid;

    /**
     * Range: 0..3600 (-180..180 deg)
     * Scale: 0.1
     * Offset: -180
     */
    uint16_t roll;

    /**
     * Range: 0..500 (0..50 deg)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t roll_accuracy;

    /**
     * Range: 0..1800 (-90..90 deg)
     * Scale: 0.1
     * Offset: -90
     */
    uint16_t pitch;

    /**
     * Range: 0..500 (0..50 deg)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t pitch_accuracy;

    /**
     * Range: 0..3600 (0..360 deg)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t heading;

    /**
     * Range: 0..500 (0..50 deg)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t heading_accuracy;
};

/**
 * Signals in message GnssOdo.
 *
 * All signal values are as on the CAN bus.
 */
struct batteries_gps_motor_2_gnss_odo_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t distance_valid;

    /**
     * Range: 0..4194303 (0..4194303 m)
     * Scale: 1
     * Offset: 0
     */
    uint32_t distance_trip;

    /**
     * Range: 0..524287 (0..524287 m)
     * Scale: 1
     * Offset: 0
     */
    uint32_t distance_accuracy;

    /**
     * Range: 0..4194303 (0..4194303 km)
     * Scale: 1
     * Offset: 0
     */
    uint32_t distance_total;
};

/**
 * Signals in message GnssSpeed.
 *
 * All signal values are as on the CAN bus.
 */
struct batteries_gps_motor_2_gnss_speed_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t speed_valid;

    /**
     * Range: 0..1048575 (0..1048.575 m/s)
     * Scale: 0.001
     * Offset: 0
     */
    uint32_t speed;

    /**
     * Range: 0..524287 (0..524.287 m/s)
     * Scale: 0.001
     * Offset: 0
     */
    uint32_t speed_accuracy;
};

/**
 * Signals in message GnssGeofence.
 *
 * All signal values are as on the CAN bus.
 */
struct batteries_gps_motor_2_gnss_geofence_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fence_valid;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fence_combined;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fence1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fence2;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fence3;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fence4;
};

/**
 * Signals in message GnssImu.
 *
 * All signal values are as on the CAN bus.
 */
struct batteries_gps_motor_2_gnss_imu_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t imu_valid;

    /**
     * Range: 0..1023 (-64..63.875 m/s^2)
     * Scale: 0.125
     * Offset: -64
     */
    uint16_t acceleration_x;

    /**
     * Range: 0..1023 (-64..63.875 m/s^2)
     * Scale: 0.125
     * Offset: -64
     */
    uint16_t acceleration_y;

    /**
     * Range: 0..1023 (-64..63.875 m/s^2)
     * Scale: 0.125
     * Offset: -64
     */
    uint16_t acceleration_z;

    /**
     * Range: 0..2047 (-256..255.75 deg/s)
     * Scale: 0.25
     * Offset: -256
     */
    uint16_t angular_rate_x;

    /**
     * Range: 0..2047 (-256..255.75 deg/s)
     * Scale: 0.25
     * Offset: -256
     */
    uint16_t angular_rate_y;

    /**
     * Range: 0..2047 (-256..255.75 deg/s)
     * Scale: 0.25
     * Offset: -256
     */
    uint16_t angular_rate_z;
};

/**
 * Signals in message Engine_Param_Rapid_Update.
 *
 * All signal values are as on the CAN bus.
 */
struct batteries_gps_motor_2_engine_param_rapid_update_t {
    /**
     * Range: 0..65533 (0..16383.25 RPM)
     * Scale: 0.25
     * Offset: 0
     */
    uint16_t motor_speed;
};

/**
 * Signals in message Electric_Drive_Status.
 *
 * All signal values are as on the CAN bus.
 */
struct batteries_gps_motor_2_electric_drive_status_t {
    /**
     * Range: 0..65533 (0..655.33 K)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t motor_temperature;
};

/**
 * Signals in message Electric_Energy_Storage_Statuse.
 *
 * All signal values are as on the CAN bus.
 */
struct batteries_gps_motor_2_electric_energy_storage_statuse_t {
    /**
     * Range: 0..253 (0..253 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t state_of_charge;

    /**
     * Range: 0..65533 (0..3931980 s)
     * Scale: 60
     * Offset: 0
     */
    uint16_t time_remaining;
};

/**
 * Signals in message Engine_Param_Dynamic.
 *
 * All signal values are as on the CAN bus.
 */
struct batteries_gps_motor_2_engine_param_dynamic_t {
    /**
     * Range: 0..65533 (0..655.33 K)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t engine_temp;
};

/**
 * Signals in message Electric_Drive_Info.
 *
 * All signal values are as on the CAN bus.
 */
struct batteries_gps_motor_2_electric_drive_info_t {
    /**
     * Range: 0..253 (0..253 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t motor_id;

    /**
     * Range: 0..3 (0..13 -)
     * Scale: 4
     * Offset: 0
     */
    uint8_t motor_type;

    /**
     * Range: 0..65533 (0..6553.3 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t motor_voltage_rating;

    /**
     * Range: 0..4294967293 (0..4294967293 W)
     * Scale: 1
     * Offset: 0
     */
    uint32_t max_cont_motor_power;

    /**
     * Range: 0..4294967293 (0..4294967293 W)
     * Scale: 1
     * Offset: 0
     */
    uint32_t max_boost_motor_power;

    /**
     * Range: 0..65533 (0..655.33 K)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t max_motor_temp_rating;

    /**
     * Range: 0..65533 (0..16383.25 rpm)
     * Scale: 0.25
     * Offset: 0
     */
    uint16_t rated_motor_speed;

    /**
     * Range: 0..1 (0..0.01 K)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t max_controller_temp_rating;

    /**
     * Range: 0..6553 (0..6553.3 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t motor_shaft_torque_rating;

    /**
     * Range: 0..65533 (0..6553.3 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t motor_dc_volt_derating_threshold;

    /**
     * Range: 0..65533 (0..6553.3 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t motor_dc_volt_cut_off_threshold;

    /**
     * Range: 0..4294967293 (0..4294967293 s)
     * Scale: 1
     * Offset: 0
     */
    uint32_t motor_hours;
};

/**
 * Signals in message Electric_Drive_Status_Rapid_Up.
 *
 * All signal values are as on the CAN bus.
 */
struct batteries_gps_motor_2_electric_drive_status_rapid_up_t {
    /**
     * Range: 0..65533 (0..6553.3 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t motor_dc_voltage;

    /**
     * Range: -32767..32765 (-3276.7..3276.5 A)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t motor_dc_current;
};

/**
 * Signals in message COG_and_SOG.
 *
 * All signal values are as on the CAN bus.
 */
struct batteries_gps_motor_2_cog_and_sog_t {
    /**
     * Range: 0..65533 (0..6.5533 rad)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cog;

    /**
     * Range: 0..65533 (0..655.33 m/s)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t sog;
};

/**
 * Pack message extra_battery_info_4.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int batteries_gps_motor_2_extra_battery_info_4_pack(
    uint8_t *dst_p,
    const struct batteries_gps_motor_2_extra_battery_info_4_t *src_p,
    size_t size);

/**
 * Unpack message extra_battery_info_4.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int batteries_gps_motor_2_extra_battery_info_4_unpack(
    struct batteries_gps_motor_2_extra_battery_info_4_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from extra_battery_info_4.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int batteries_gps_motor_2_extra_battery_info_4_init(struct batteries_gps_motor_2_extra_battery_info_4_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_4_general_alarm_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_4_general_alarm_4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_4_general_alarm_4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_4_battery_high_voltage_alarm_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_4_battery_high_voltage_alarm_4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_4_battery_high_voltage_alarm_4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_4_battery_low_voltage_alarm_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_4_battery_low_voltage_alarm_4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_4_battery_low_voltage_alarm_4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_4_battery_high_temperature_alarm_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_4_battery_high_temperature_alarm_4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_4_battery_high_temperature_alarm_4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_4_battery_low_temperature_alarm_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_4_battery_low_temperature_alarm_4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_4_battery_low_temperature_alarm_4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_4_battery_high_temp_charge_alarm_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_4_battery_high_temp_charge_alarm_4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_4_battery_high_temp_charge_alarm_4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_4_battery_low_temp_charge_alarm_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_4_battery_low_temp_charge_alarm_4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_4_battery_low_temp_charge_alarm_4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_4_battery_high_current_alarm_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_4_battery_high_current_alarm_4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_4_battery_high_current_alarm_4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_4_battery_high_charge_curr_alarm_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_4_battery_high_charge_curr_alarm_4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_4_battery_high_charge_curr_alarm_4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_4_contactor_alarm_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_4_contactor_alarm_4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_4_contactor_alarm_4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_4_short_circuit_alarm_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_4_short_circuit_alarm_4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_4_short_circuit_alarm_4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_4_bms_internal_alarm_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_4_bms_internal_alarm_4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_4_bms_internal_alarm_4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_4_cell_imbalance_alarm_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_4_cell_imbalance_alarm_4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_4_cell_imbalance_alarm_4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_4_general_warning_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_4_general_warning_4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_4_general_warning_4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_4_battery_high_voltage_warning_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_4_battery_high_voltage_warning_4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_4_battery_high_voltage_warning_4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_4_battery_low_voltage_warning_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_4_battery_low_voltage_warning_4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_4_battery_low_voltage_warning_4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_4_battery_high_temp_warning_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_4_battery_high_temp_warning_4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_4_battery_high_temp_warning_4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_4_battery_low_temp_warning_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_4_battery_low_temp_warning_4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_4_battery_low_temp_warning_4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_4_battery_high_temp_charge_warn_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_4_battery_high_temp_charge_warn_4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_4_battery_high_temp_charge_warn_4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_4_battery_low_temp_charge_warn_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_4_battery_low_temp_charge_warn_4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_4_battery_low_temp_charge_warn_4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_4_battery_high_current_warning_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_4_battery_high_current_warning_4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_4_battery_high_current_warning_4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_4_battery_high_charge_curr_warn_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_4_battery_high_charge_curr_warn_4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_4_battery_high_charge_curr_warn_4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_4_contactor_warning_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_4_contactor_warning_4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_4_contactor_warning_4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_4_short_circuit_warning_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_4_short_circuit_warning_4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_4_short_circuit_warning_4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_4_bms_internal_warning_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_4_bms_internal_warning_4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_4_bms_internal_warning_4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_4_cell_imbalance_warning_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_4_cell_imbalance_warning_4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_4_cell_imbalance_warning_4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_4_system_status_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_4_system_status_4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_4_system_status_4_is_in_range(uint8_t value);

/**
 * Pack message extra_battery_info_3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int batteries_gps_motor_2_extra_battery_info_3_pack(
    uint8_t *dst_p,
    const struct batteries_gps_motor_2_extra_battery_info_3_t *src_p,
    size_t size);

/**
 * Unpack message extra_battery_info_3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int batteries_gps_motor_2_extra_battery_info_3_unpack(
    struct batteries_gps_motor_2_extra_battery_info_3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from extra_battery_info_3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int batteries_gps_motor_2_extra_battery_info_3_init(struct batteries_gps_motor_2_extra_battery_info_3_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_3_general_alarm_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_3_general_alarm_3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_3_general_alarm_3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_3_battery_high_voltage_alarm_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_3_battery_high_voltage_alarm_3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_3_battery_high_voltage_alarm_3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_3_battery_low_voltage_alarm_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_3_battery_low_voltage_alarm_3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_3_battery_low_voltage_alarm_3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_3_battery_high_temperature_alarm_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_3_battery_high_temperature_alarm_3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_3_battery_high_temperature_alarm_3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_3_battery_low_temperature_alarm_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_3_battery_low_temperature_alarm_3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_3_battery_low_temperature_alarm_3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_3_battery_high_temp_charge_alarm_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_3_battery_high_temp_charge_alarm_3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_3_battery_high_temp_charge_alarm_3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_3_battery_low_temp_charge_alarm_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_3_battery_low_temp_charge_alarm_3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_3_battery_low_temp_charge_alarm_3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_3_battery_high_current_alarm_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_3_battery_high_current_alarm_3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_3_battery_high_current_alarm_3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_3_battery_high_charge_curr_alarm_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_3_battery_high_charge_curr_alarm_3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_3_battery_high_charge_curr_alarm_3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_3_contactor_alarm_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_3_contactor_alarm_3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_3_contactor_alarm_3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_3_short_circuit_alarm_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_3_short_circuit_alarm_3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_3_short_circuit_alarm_3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_3_bms_internal_alarm_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_3_bms_internal_alarm_3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_3_bms_internal_alarm_3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_3_cell_imbalance_alarm_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_3_cell_imbalance_alarm_3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_3_cell_imbalance_alarm_3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_3_general_warning_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_3_general_warning_3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_3_general_warning_3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_3_battery_high_voltage_warning_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_3_battery_high_voltage_warning_3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_3_battery_high_voltage_warning_3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_3_battery_low_voltage_warning_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_3_battery_low_voltage_warning_3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_3_battery_low_voltage_warning_3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_3_battery_high_temp_warning_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_3_battery_high_temp_warning_3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_3_battery_high_temp_warning_3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_3_battery_low_temp_warning_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_3_battery_low_temp_warning_3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_3_battery_low_temp_warning_3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_3_battery_high_temp_charge_warn_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_3_battery_high_temp_charge_warn_3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_3_battery_high_temp_charge_warn_3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_3_battery_low_temp_charge_warn_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_3_battery_low_temp_charge_warn_3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_3_battery_low_temp_charge_warn_3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_3_battery_high_current_warning_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_3_battery_high_current_warning_3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_3_battery_high_current_warning_3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_3_battery_high_charge_curr_warn_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_3_battery_high_charge_curr_warn_3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_3_battery_high_charge_curr_warn_3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_3_contactor_warning_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_3_contactor_warning_3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_3_contactor_warning_3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_3_short_circuit_warning_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_3_short_circuit_warning_3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_3_short_circuit_warning_3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_3_bms_internal_warning_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_3_bms_internal_warning_3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_3_bms_internal_warning_3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_3_cell_imbalance_warning_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_3_cell_imbalance_warning_3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_3_cell_imbalance_warning_3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_3_system_status_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_3_system_status_3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_3_system_status_3_is_in_range(uint8_t value);

/**
 * Pack message extra_battery_info_2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int batteries_gps_motor_2_extra_battery_info_2_pack(
    uint8_t *dst_p,
    const struct batteries_gps_motor_2_extra_battery_info_2_t *src_p,
    size_t size);

/**
 * Unpack message extra_battery_info_2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int batteries_gps_motor_2_extra_battery_info_2_unpack(
    struct batteries_gps_motor_2_extra_battery_info_2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from extra_battery_info_2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int batteries_gps_motor_2_extra_battery_info_2_init(struct batteries_gps_motor_2_extra_battery_info_2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_2_general_alarm_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_2_general_alarm_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_2_general_alarm_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_2_battery_high_voltage_alarm_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_2_battery_high_voltage_alarm_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_2_battery_high_voltage_alarm_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_2_battery_low_voltage_alarm_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_2_battery_low_voltage_alarm_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_2_battery_low_voltage_alarm_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_2_battery_high_temperature_alarm_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_2_battery_high_temperature_alarm_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_2_battery_high_temperature_alarm_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_2_battery_low_temperature_alarm_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_2_battery_low_temperature_alarm_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_2_battery_low_temperature_alarm_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_2_battery_high_temp_charge_alarm_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_2_battery_high_temp_charge_alarm_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_2_battery_high_temp_charge_alarm_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_2_battery_low_temp_charge_alarm_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_2_battery_low_temp_charge_alarm_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_2_battery_low_temp_charge_alarm_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_2_battery_high_current_alarm_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_2_battery_high_current_alarm_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_2_battery_high_current_alarm_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_2_battery_high_charge_curr_alarm_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_2_battery_high_charge_curr_alarm_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_2_battery_high_charge_curr_alarm_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_2_contactor_alarm_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_2_contactor_alarm_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_2_contactor_alarm_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_2_short_circuit_alarm_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_2_short_circuit_alarm_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_2_short_circuit_alarm_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_2_bms_internal_alarm_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_2_bms_internal_alarm_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_2_bms_internal_alarm_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_2_cell_imbalance_alarm_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_2_cell_imbalance_alarm_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_2_cell_imbalance_alarm_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_2_general_warning_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_2_general_warning_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_2_general_warning_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_2_battery_high_voltage_warning_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_2_battery_high_voltage_warning_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_2_battery_high_voltage_warning_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_2_battery_low_voltage_warning_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_2_battery_low_voltage_warning_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_2_battery_low_voltage_warning_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_2_battery_high_temp_warning_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_2_battery_high_temp_warning_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_2_battery_high_temp_warning_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_2_battery_low_temp_warning_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_2_battery_low_temp_warning_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_2_battery_low_temp_warning_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_2_battery_high_temp_charge_warn_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_2_battery_high_temp_charge_warn_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_2_battery_high_temp_charge_warn_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_2_battery_low_temp_charge_warn_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_2_battery_low_temp_charge_warn_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_2_battery_low_temp_charge_warn_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_2_battery_high_current_warning_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_2_battery_high_current_warning_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_2_battery_high_current_warning_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_2_battery_high_charge_curr_warn_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_2_battery_high_charge_curr_warn_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_2_battery_high_charge_curr_warn_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_2_contactor_warning_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_2_contactor_warning_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_2_contactor_warning_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_2_short_circuit_warning_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_2_short_circuit_warning_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_2_short_circuit_warning_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_2_bms_internal_warning_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_2_bms_internal_warning_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_2_bms_internal_warning_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_2_cell_imbalance_warning_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_2_cell_imbalance_warning_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_2_cell_imbalance_warning_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_2_system_status_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_2_system_status_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_2_system_status_2_is_in_range(uint8_t value);

/**
 * Pack message extra_battery_info_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int batteries_gps_motor_2_extra_battery_info_1_pack(
    uint8_t *dst_p,
    const struct batteries_gps_motor_2_extra_battery_info_1_t *src_p,
    size_t size);

/**
 * Unpack message extra_battery_info_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int batteries_gps_motor_2_extra_battery_info_1_unpack(
    struct batteries_gps_motor_2_extra_battery_info_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from extra_battery_info_1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int batteries_gps_motor_2_extra_battery_info_1_init(struct batteries_gps_motor_2_extra_battery_info_1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_1_general_alarm_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_1_general_alarm_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_1_general_alarm_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_1_battery_high_voltage_alarm_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_1_battery_high_voltage_alarm_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_1_battery_high_voltage_alarm_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_1_battery_low_voltage_alarm_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_1_battery_low_voltage_alarm_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_1_battery_low_voltage_alarm_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_1_battery_high_temperature_alarm_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_1_battery_high_temperature_alarm_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_1_battery_high_temperature_alarm_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_1_battery_low_temperature_alarm_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_1_battery_low_temperature_alarm_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_1_battery_low_temperature_alarm_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_1_battery_high_temp_charge_alarm_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_1_battery_high_temp_charge_alarm_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_1_battery_high_temp_charge_alarm_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_1_battery_low_temp_charge_alarm_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_1_battery_low_temp_charge_alarm_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_1_battery_low_temp_charge_alarm_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_1_battery_high_current_alarm_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_1_battery_high_current_alarm_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_1_battery_high_current_alarm_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_1_battery_high_charge_curr_alarm_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_1_battery_high_charge_curr_alarm_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_1_battery_high_charge_curr_alarm_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_1_contactor_alarm_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_1_contactor_alarm_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_1_contactor_alarm_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_1_short_circuit_alarm_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_1_short_circuit_alarm_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_1_short_circuit_alarm_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_1_bms_internal_alarm_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_1_bms_internal_alarm_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_1_bms_internal_alarm_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_1_cell_imbalance_alarm_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_1_cell_imbalance_alarm_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_1_cell_imbalance_alarm_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_1_general_warning_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_1_general_warning_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_1_general_warning_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_1_battery_high_voltage_warning_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_1_battery_high_voltage_warning_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_1_battery_high_voltage_warning_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_1_battery_low_voltage_warning_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_1_battery_low_voltage_warning_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_1_battery_low_voltage_warning_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_1_battery_high_temp_warning_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_1_battery_high_temp_warning_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_1_battery_high_temp_warning_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_1_battery_low_temp_warning_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_1_battery_low_temp_warning_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_1_battery_low_temp_warning_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_1_battery_high_temp_charge_warn_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_1_battery_high_temp_charge_warn_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_1_battery_high_temp_charge_warn_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_1_battery_low_temp_charge_warn_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_1_battery_low_temp_charge_warn_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_1_battery_low_temp_charge_warn_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_1_battery_high_current_warning_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_1_battery_high_current_warning_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_1_battery_high_current_warning_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_1_battery_high_charge_curr_warn_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_1_battery_high_charge_curr_warn_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_1_battery_high_charge_curr_warn_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_1_contactor_warning_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_1_contactor_warning_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_1_contactor_warning_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_1_short_circuit_warning_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_1_short_circuit_warning_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_1_short_circuit_warning_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_1_bms_internal_warning_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_1_bms_internal_warning_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_1_bms_internal_warning_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_1_cell_imbalance_warning_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_1_cell_imbalance_warning_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_1_cell_imbalance_warning_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_extra_battery_info_1_system_status_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_extra_battery_info_1_system_status_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_extra_battery_info_1_system_status_1_is_in_range(uint8_t value);

/**
 * Pack message Battery_VoltCurrTemp_4.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int batteries_gps_motor_2_battery_volt_curr_temp_4_pack(
    uint8_t *dst_p,
    const struct batteries_gps_motor_2_battery_volt_curr_temp_4_t *src_p,
    size_t size);

/**
 * Unpack message Battery_VoltCurrTemp_4.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int batteries_gps_motor_2_battery_volt_curr_temp_4_unpack(
    struct batteries_gps_motor_2_battery_volt_curr_temp_4_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Battery_VoltCurrTemp_4.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int batteries_gps_motor_2_battery_volt_curr_temp_4_init(struct batteries_gps_motor_2_battery_volt_curr_temp_4_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t batteries_gps_motor_2_battery_volt_curr_temp_4_battery_voltage_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_battery_volt_curr_temp_4_battery_voltage_4_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_battery_volt_curr_temp_4_battery_voltage_4_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t batteries_gps_motor_2_battery_volt_curr_temp_4_battery_current_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_battery_volt_curr_temp_4_battery_current_4_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_battery_volt_curr_temp_4_battery_current_4_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t batteries_gps_motor_2_battery_volt_curr_temp_4_battery_temp_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_battery_volt_curr_temp_4_battery_temp_4_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_battery_volt_curr_temp_4_battery_temp_4_is_in_range(int16_t value);

/**
 * Pack message Battery_VoltCurrTemp_3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int batteries_gps_motor_2_battery_volt_curr_temp_3_pack(
    uint8_t *dst_p,
    const struct batteries_gps_motor_2_battery_volt_curr_temp_3_t *src_p,
    size_t size);

/**
 * Unpack message Battery_VoltCurrTemp_3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int batteries_gps_motor_2_battery_volt_curr_temp_3_unpack(
    struct batteries_gps_motor_2_battery_volt_curr_temp_3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Battery_VoltCurrTemp_3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int batteries_gps_motor_2_battery_volt_curr_temp_3_init(struct batteries_gps_motor_2_battery_volt_curr_temp_3_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t batteries_gps_motor_2_battery_volt_curr_temp_3_battery_voltage_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_battery_volt_curr_temp_3_battery_voltage_3_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_battery_volt_curr_temp_3_battery_voltage_3_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t batteries_gps_motor_2_battery_volt_curr_temp_3_battery_current_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_battery_volt_curr_temp_3_battery_current_3_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_battery_volt_curr_temp_3_battery_current_3_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t batteries_gps_motor_2_battery_volt_curr_temp_3_battery_temp_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_battery_volt_curr_temp_3_battery_temp_3_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_battery_volt_curr_temp_3_battery_temp_3_is_in_range(int16_t value);

/**
 * Pack message Battery_VoltCurrTemp_2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int batteries_gps_motor_2_battery_volt_curr_temp_2_pack(
    uint8_t *dst_p,
    const struct batteries_gps_motor_2_battery_volt_curr_temp_2_t *src_p,
    size_t size);

/**
 * Unpack message Battery_VoltCurrTemp_2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int batteries_gps_motor_2_battery_volt_curr_temp_2_unpack(
    struct batteries_gps_motor_2_battery_volt_curr_temp_2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Battery_VoltCurrTemp_2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int batteries_gps_motor_2_battery_volt_curr_temp_2_init(struct batteries_gps_motor_2_battery_volt_curr_temp_2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t batteries_gps_motor_2_battery_volt_curr_temp_2_battery_voltage_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_battery_volt_curr_temp_2_battery_voltage_2_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_battery_volt_curr_temp_2_battery_voltage_2_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t batteries_gps_motor_2_battery_volt_curr_temp_2_battery_current_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_battery_volt_curr_temp_2_battery_current_2_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_battery_volt_curr_temp_2_battery_current_2_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t batteries_gps_motor_2_battery_volt_curr_temp_2_battery_temp_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_battery_volt_curr_temp_2_battery_temp_2_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_battery_volt_curr_temp_2_battery_temp_2_is_in_range(int16_t value);

/**
 * Pack message Battery_VoltCurrTemp_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int batteries_gps_motor_2_battery_volt_curr_temp_1_pack(
    uint8_t *dst_p,
    const struct batteries_gps_motor_2_battery_volt_curr_temp_1_t *src_p,
    size_t size);

/**
 * Unpack message Battery_VoltCurrTemp_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int batteries_gps_motor_2_battery_volt_curr_temp_1_unpack(
    struct batteries_gps_motor_2_battery_volt_curr_temp_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Battery_VoltCurrTemp_1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int batteries_gps_motor_2_battery_volt_curr_temp_1_init(struct batteries_gps_motor_2_battery_volt_curr_temp_1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t batteries_gps_motor_2_battery_volt_curr_temp_1_battery_voltage_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_battery_volt_curr_temp_1_battery_voltage_1_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_battery_volt_curr_temp_1_battery_voltage_1_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t batteries_gps_motor_2_battery_volt_curr_temp_1_battery_current_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_battery_volt_curr_temp_1_battery_current_1_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_battery_volt_curr_temp_1_battery_current_1_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t batteries_gps_motor_2_battery_volt_curr_temp_1_battery_temp_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_battery_volt_curr_temp_1_battery_temp_1_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_battery_volt_curr_temp_1_battery_temp_1_is_in_range(int16_t value);

/**
 * Pack message SOC_SOH_4.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int batteries_gps_motor_2_soc_soh_4_pack(
    uint8_t *dst_p,
    const struct batteries_gps_motor_2_soc_soh_4_t *src_p,
    size_t size);

/**
 * Unpack message SOC_SOH_4.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int batteries_gps_motor_2_soc_soh_4_unpack(
    struct batteries_gps_motor_2_soc_soh_4_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from SOC_SOH_4.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int batteries_gps_motor_2_soc_soh_4_init(struct batteries_gps_motor_2_soc_soh_4_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t batteries_gps_motor_2_soc_soh_4_soc_value_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_soc_soh_4_soc_value_4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_soc_soh_4_soc_value_4_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t batteries_gps_motor_2_soc_soh_4_soh_value_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_soc_soh_4_soh_value_4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_soc_soh_4_soh_value_4_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t batteries_gps_motor_2_soc_soh_4_high_res_soc_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_soc_soh_4_high_res_soc_4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_soc_soh_4_high_res_soc_4_is_in_range(uint16_t value);

/**
 * Pack message SOC_SOH_3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int batteries_gps_motor_2_soc_soh_3_pack(
    uint8_t *dst_p,
    const struct batteries_gps_motor_2_soc_soh_3_t *src_p,
    size_t size);

/**
 * Unpack message SOC_SOH_3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int batteries_gps_motor_2_soc_soh_3_unpack(
    struct batteries_gps_motor_2_soc_soh_3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from SOC_SOH_3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int batteries_gps_motor_2_soc_soh_3_init(struct batteries_gps_motor_2_soc_soh_3_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t batteries_gps_motor_2_soc_soh_3_soc_value_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_soc_soh_3_soc_value_3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_soc_soh_3_soc_value_3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t batteries_gps_motor_2_soc_soh_3_soh_value_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_soc_soh_3_soh_value_3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_soc_soh_3_soh_value_3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t batteries_gps_motor_2_soc_soh_3_high_res_soc_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_soc_soh_3_high_res_soc_3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_soc_soh_3_high_res_soc_3_is_in_range(uint16_t value);

/**
 * Pack message SOC_SOH_2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int batteries_gps_motor_2_soc_soh_2_pack(
    uint8_t *dst_p,
    const struct batteries_gps_motor_2_soc_soh_2_t *src_p,
    size_t size);

/**
 * Unpack message SOC_SOH_2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int batteries_gps_motor_2_soc_soh_2_unpack(
    struct batteries_gps_motor_2_soc_soh_2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from SOC_SOH_2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int batteries_gps_motor_2_soc_soh_2_init(struct batteries_gps_motor_2_soc_soh_2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t batteries_gps_motor_2_soc_soh_2_soc_value_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_soc_soh_2_soc_value_2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_soc_soh_2_soc_value_2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t batteries_gps_motor_2_soc_soh_2_soh_value_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_soc_soh_2_soh_value_2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_soc_soh_2_soh_value_2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t batteries_gps_motor_2_soc_soh_2_high_res_soc_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_soc_soh_2_high_res_soc_2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_soc_soh_2_high_res_soc_2_is_in_range(uint16_t value);

/**
 * Pack message SOC_SOH_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int batteries_gps_motor_2_soc_soh_1_pack(
    uint8_t *dst_p,
    const struct batteries_gps_motor_2_soc_soh_1_t *src_p,
    size_t size);

/**
 * Unpack message SOC_SOH_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int batteries_gps_motor_2_soc_soh_1_unpack(
    struct batteries_gps_motor_2_soc_soh_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from SOC_SOH_1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int batteries_gps_motor_2_soc_soh_1_init(struct batteries_gps_motor_2_soc_soh_1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t batteries_gps_motor_2_soc_soh_1_soc_value_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_soc_soh_1_soc_value_1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_soc_soh_1_soc_value_1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t batteries_gps_motor_2_soc_soh_1_soh_value_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_soc_soh_1_soh_value_1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_soc_soh_1_soh_value_1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t batteries_gps_motor_2_soc_soh_1_high_res_soc_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_soc_soh_1_high_res_soc_1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_soc_soh_1_high_res_soc_1_is_in_range(uint16_t value);

/**
 * Pack message charge_status_4.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int batteries_gps_motor_2_charge_status_4_pack(
    uint8_t *dst_p,
    const struct batteries_gps_motor_2_charge_status_4_t *src_p,
    size_t size);

/**
 * Unpack message charge_status_4.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int batteries_gps_motor_2_charge_status_4_unpack(
    struct batteries_gps_motor_2_charge_status_4_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from charge_status_4.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int batteries_gps_motor_2_charge_status_4_init(struct batteries_gps_motor_2_charge_status_4_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t batteries_gps_motor_2_charge_status_4_charge_voltage_limit_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_charge_status_4_charge_voltage_limit_4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_charge_status_4_charge_voltage_limit_4_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t batteries_gps_motor_2_charge_status_4_max_charge_current_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_charge_status_4_max_charge_current_4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_charge_status_4_max_charge_current_4_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t batteries_gps_motor_2_charge_status_4_max_discharge_current_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_charge_status_4_max_discharge_current_4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_charge_status_4_max_discharge_current_4_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t batteries_gps_motor_2_charge_status_4_discharge_voltage_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_charge_status_4_discharge_voltage_4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_charge_status_4_discharge_voltage_4_is_in_range(uint16_t value);

/**
 * Pack message charge_status_3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int batteries_gps_motor_2_charge_status_3_pack(
    uint8_t *dst_p,
    const struct batteries_gps_motor_2_charge_status_3_t *src_p,
    size_t size);

/**
 * Unpack message charge_status_3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int batteries_gps_motor_2_charge_status_3_unpack(
    struct batteries_gps_motor_2_charge_status_3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from charge_status_3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int batteries_gps_motor_2_charge_status_3_init(struct batteries_gps_motor_2_charge_status_3_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t batteries_gps_motor_2_charge_status_3_charge_voltage_limit_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_charge_status_3_charge_voltage_limit_3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_charge_status_3_charge_voltage_limit_3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t batteries_gps_motor_2_charge_status_3_max_charge_current_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_charge_status_3_max_charge_current_3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_charge_status_3_max_charge_current_3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t batteries_gps_motor_2_charge_status_3_max_discharge_current_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_charge_status_3_max_discharge_current_3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_charge_status_3_max_discharge_current_3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t batteries_gps_motor_2_charge_status_3_discharge_voltage_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_charge_status_3_discharge_voltage_3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_charge_status_3_discharge_voltage_3_is_in_range(uint16_t value);

/**
 * Pack message charge_status_2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int batteries_gps_motor_2_charge_status_2_pack(
    uint8_t *dst_p,
    const struct batteries_gps_motor_2_charge_status_2_t *src_p,
    size_t size);

/**
 * Unpack message charge_status_2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int batteries_gps_motor_2_charge_status_2_unpack(
    struct batteries_gps_motor_2_charge_status_2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from charge_status_2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int batteries_gps_motor_2_charge_status_2_init(struct batteries_gps_motor_2_charge_status_2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t batteries_gps_motor_2_charge_status_2_charge_voltage_limit_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_charge_status_2_charge_voltage_limit_2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_charge_status_2_charge_voltage_limit_2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t batteries_gps_motor_2_charge_status_2_max_charge_current_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_charge_status_2_max_charge_current_2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_charge_status_2_max_charge_current_2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t batteries_gps_motor_2_charge_status_2_max_discharge_current_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_charge_status_2_max_discharge_current_2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_charge_status_2_max_discharge_current_2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t batteries_gps_motor_2_charge_status_2_discharge_voltage_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_charge_status_2_discharge_voltage_2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_charge_status_2_discharge_voltage_2_is_in_range(uint16_t value);

/**
 * Pack message charge_status_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int batteries_gps_motor_2_charge_status_1_pack(
    uint8_t *dst_p,
    const struct batteries_gps_motor_2_charge_status_1_t *src_p,
    size_t size);

/**
 * Unpack message charge_status_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int batteries_gps_motor_2_charge_status_1_unpack(
    struct batteries_gps_motor_2_charge_status_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from charge_status_1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int batteries_gps_motor_2_charge_status_1_init(struct batteries_gps_motor_2_charge_status_1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t batteries_gps_motor_2_charge_status_1_charge_voltage_limit_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_charge_status_1_charge_voltage_limit_1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_charge_status_1_charge_voltage_limit_1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t batteries_gps_motor_2_charge_status_1_max_charge_current_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_charge_status_1_max_charge_current_1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_charge_status_1_max_charge_current_1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t batteries_gps_motor_2_charge_status_1_max_discharge_current_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_charge_status_1_max_discharge_current_1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_charge_status_1_max_discharge_current_1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t batteries_gps_motor_2_charge_status_1_discharge_voltage_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_charge_status_1_discharge_voltage_1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_charge_status_1_discharge_voltage_1_is_in_range(uint16_t value);

/**
 * Pack message GnssStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int batteries_gps_motor_2_gnss_status_pack(
    uint8_t *dst_p,
    const struct batteries_gps_motor_2_gnss_status_t *src_p,
    size_t size);

/**
 * Unpack message GnssStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int batteries_gps_motor_2_gnss_status_unpack(
    struct batteries_gps_motor_2_gnss_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GnssStatus.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int batteries_gps_motor_2_gnss_status_init(struct batteries_gps_motor_2_gnss_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_gnss_status_fix_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_gnss_status_fix_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_gnss_status_fix_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_gnss_status_satellites_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_gnss_status_satellites_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_gnss_status_satellites_is_in_range(uint8_t value);

/**
 * Pack message GnssTime.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int batteries_gps_motor_2_gnss_time_pack(
    uint8_t *dst_p,
    const struct batteries_gps_motor_2_gnss_time_t *src_p,
    size_t size);

/**
 * Unpack message GnssTime.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int batteries_gps_motor_2_gnss_time_unpack(
    struct batteries_gps_motor_2_gnss_time_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GnssTime.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int batteries_gps_motor_2_gnss_time_init(struct batteries_gps_motor_2_gnss_time_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_gnss_time_time_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_gnss_time_time_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_gnss_time_time_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_gnss_time_time_confirmed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_gnss_time_time_confirmed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_gnss_time_time_confirmed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t batteries_gps_motor_2_gnss_time_epoch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_gnss_time_epoch_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_gnss_time_epoch_is_in_range(uint64_t value);

/**
 * Pack message GnssPosition.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int batteries_gps_motor_2_gnss_position_pack(
    uint8_t *dst_p,
    const struct batteries_gps_motor_2_gnss_position_t *src_p,
    size_t size);

/**
 * Unpack message GnssPosition.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int batteries_gps_motor_2_gnss_position_unpack(
    struct batteries_gps_motor_2_gnss_position_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GnssPosition.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int batteries_gps_motor_2_gnss_position_init(struct batteries_gps_motor_2_gnss_position_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_gnss_position_position_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_gnss_position_position_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_gnss_position_position_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t batteries_gps_motor_2_gnss_position_latitude_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_gnss_position_latitude_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_gnss_position_latitude_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t batteries_gps_motor_2_gnss_position_longitude_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_gnss_position_longitude_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_gnss_position_longitude_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_gnss_position_position_accuracy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_gnss_position_position_accuracy_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_gnss_position_position_accuracy_is_in_range(uint8_t value);

/**
 * Pack message GnssAltitude.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int batteries_gps_motor_2_gnss_altitude_pack(
    uint8_t *dst_p,
    const struct batteries_gps_motor_2_gnss_altitude_t *src_p,
    size_t size);

/**
 * Unpack message GnssAltitude.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int batteries_gps_motor_2_gnss_altitude_unpack(
    struct batteries_gps_motor_2_gnss_altitude_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GnssAltitude.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int batteries_gps_motor_2_gnss_altitude_init(struct batteries_gps_motor_2_gnss_altitude_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_gnss_altitude_altitude_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_gnss_altitude_altitude_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_gnss_altitude_altitude_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t batteries_gps_motor_2_gnss_altitude_altitude_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_gnss_altitude_altitude_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_gnss_altitude_altitude_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t batteries_gps_motor_2_gnss_altitude_altitude_accuracy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_gnss_altitude_altitude_accuracy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_gnss_altitude_altitude_accuracy_is_in_range(uint16_t value);

/**
 * Pack message GnssAttitude.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int batteries_gps_motor_2_gnss_attitude_pack(
    uint8_t *dst_p,
    const struct batteries_gps_motor_2_gnss_attitude_t *src_p,
    size_t size);

/**
 * Unpack message GnssAttitude.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int batteries_gps_motor_2_gnss_attitude_unpack(
    struct batteries_gps_motor_2_gnss_attitude_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GnssAttitude.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int batteries_gps_motor_2_gnss_attitude_init(struct batteries_gps_motor_2_gnss_attitude_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_gnss_attitude_attitude_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_gnss_attitude_attitude_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_gnss_attitude_attitude_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t batteries_gps_motor_2_gnss_attitude_roll_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_gnss_attitude_roll_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_gnss_attitude_roll_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t batteries_gps_motor_2_gnss_attitude_roll_accuracy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_gnss_attitude_roll_accuracy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_gnss_attitude_roll_accuracy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t batteries_gps_motor_2_gnss_attitude_pitch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_gnss_attitude_pitch_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_gnss_attitude_pitch_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t batteries_gps_motor_2_gnss_attitude_pitch_accuracy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_gnss_attitude_pitch_accuracy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_gnss_attitude_pitch_accuracy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t batteries_gps_motor_2_gnss_attitude_heading_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_gnss_attitude_heading_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_gnss_attitude_heading_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t batteries_gps_motor_2_gnss_attitude_heading_accuracy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_gnss_attitude_heading_accuracy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_gnss_attitude_heading_accuracy_is_in_range(uint16_t value);

/**
 * Pack message GnssOdo.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int batteries_gps_motor_2_gnss_odo_pack(
    uint8_t *dst_p,
    const struct batteries_gps_motor_2_gnss_odo_t *src_p,
    size_t size);

/**
 * Unpack message GnssOdo.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int batteries_gps_motor_2_gnss_odo_unpack(
    struct batteries_gps_motor_2_gnss_odo_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GnssOdo.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int batteries_gps_motor_2_gnss_odo_init(struct batteries_gps_motor_2_gnss_odo_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_gnss_odo_distance_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_gnss_odo_distance_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_gnss_odo_distance_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t batteries_gps_motor_2_gnss_odo_distance_trip_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_gnss_odo_distance_trip_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_gnss_odo_distance_trip_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t batteries_gps_motor_2_gnss_odo_distance_accuracy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_gnss_odo_distance_accuracy_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_gnss_odo_distance_accuracy_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t batteries_gps_motor_2_gnss_odo_distance_total_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_gnss_odo_distance_total_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_gnss_odo_distance_total_is_in_range(uint32_t value);

/**
 * Pack message GnssSpeed.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int batteries_gps_motor_2_gnss_speed_pack(
    uint8_t *dst_p,
    const struct batteries_gps_motor_2_gnss_speed_t *src_p,
    size_t size);

/**
 * Unpack message GnssSpeed.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int batteries_gps_motor_2_gnss_speed_unpack(
    struct batteries_gps_motor_2_gnss_speed_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GnssSpeed.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int batteries_gps_motor_2_gnss_speed_init(struct batteries_gps_motor_2_gnss_speed_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_gnss_speed_speed_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_gnss_speed_speed_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_gnss_speed_speed_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t batteries_gps_motor_2_gnss_speed_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_gnss_speed_speed_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_gnss_speed_speed_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t batteries_gps_motor_2_gnss_speed_speed_accuracy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_gnss_speed_speed_accuracy_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_gnss_speed_speed_accuracy_is_in_range(uint32_t value);

/**
 * Pack message GnssGeofence.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int batteries_gps_motor_2_gnss_geofence_pack(
    uint8_t *dst_p,
    const struct batteries_gps_motor_2_gnss_geofence_t *src_p,
    size_t size);

/**
 * Unpack message GnssGeofence.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int batteries_gps_motor_2_gnss_geofence_unpack(
    struct batteries_gps_motor_2_gnss_geofence_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GnssGeofence.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int batteries_gps_motor_2_gnss_geofence_init(struct batteries_gps_motor_2_gnss_geofence_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_gnss_geofence_fence_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_gnss_geofence_fence_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_gnss_geofence_fence_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_gnss_geofence_fence_combined_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_gnss_geofence_fence_combined_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_gnss_geofence_fence_combined_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_gnss_geofence_fence1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_gnss_geofence_fence1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_gnss_geofence_fence1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_gnss_geofence_fence2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_gnss_geofence_fence2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_gnss_geofence_fence2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_gnss_geofence_fence3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_gnss_geofence_fence3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_gnss_geofence_fence3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_gnss_geofence_fence4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_gnss_geofence_fence4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_gnss_geofence_fence4_is_in_range(uint8_t value);

/**
 * Pack message GnssImu.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int batteries_gps_motor_2_gnss_imu_pack(
    uint8_t *dst_p,
    const struct batteries_gps_motor_2_gnss_imu_t *src_p,
    size_t size);

/**
 * Unpack message GnssImu.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int batteries_gps_motor_2_gnss_imu_unpack(
    struct batteries_gps_motor_2_gnss_imu_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GnssImu.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int batteries_gps_motor_2_gnss_imu_init(struct batteries_gps_motor_2_gnss_imu_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_gnss_imu_imu_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_gnss_imu_imu_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_gnss_imu_imu_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t batteries_gps_motor_2_gnss_imu_acceleration_x_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_gnss_imu_acceleration_x_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_gnss_imu_acceleration_x_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t batteries_gps_motor_2_gnss_imu_acceleration_y_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_gnss_imu_acceleration_y_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_gnss_imu_acceleration_y_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t batteries_gps_motor_2_gnss_imu_acceleration_z_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_gnss_imu_acceleration_z_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_gnss_imu_acceleration_z_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t batteries_gps_motor_2_gnss_imu_angular_rate_x_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_gnss_imu_angular_rate_x_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_gnss_imu_angular_rate_x_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t batteries_gps_motor_2_gnss_imu_angular_rate_y_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_gnss_imu_angular_rate_y_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_gnss_imu_angular_rate_y_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t batteries_gps_motor_2_gnss_imu_angular_rate_z_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_gnss_imu_angular_rate_z_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_gnss_imu_angular_rate_z_is_in_range(uint16_t value);

/**
 * Pack message Engine_Param_Rapid_Update.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int batteries_gps_motor_2_engine_param_rapid_update_pack(
    uint8_t *dst_p,
    const struct batteries_gps_motor_2_engine_param_rapid_update_t *src_p,
    size_t size);

/**
 * Unpack message Engine_Param_Rapid_Update.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int batteries_gps_motor_2_engine_param_rapid_update_unpack(
    struct batteries_gps_motor_2_engine_param_rapid_update_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Engine_Param_Rapid_Update.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int batteries_gps_motor_2_engine_param_rapid_update_init(struct batteries_gps_motor_2_engine_param_rapid_update_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t batteries_gps_motor_2_engine_param_rapid_update_motor_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_engine_param_rapid_update_motor_speed_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_engine_param_rapid_update_motor_speed_is_in_range(uint16_t value);

/**
 * Pack message Electric_Drive_Status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int batteries_gps_motor_2_electric_drive_status_pack(
    uint8_t *dst_p,
    const struct batteries_gps_motor_2_electric_drive_status_t *src_p,
    size_t size);

/**
 * Unpack message Electric_Drive_Status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int batteries_gps_motor_2_electric_drive_status_unpack(
    struct batteries_gps_motor_2_electric_drive_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Electric_Drive_Status.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int batteries_gps_motor_2_electric_drive_status_init(struct batteries_gps_motor_2_electric_drive_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t batteries_gps_motor_2_electric_drive_status_motor_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_electric_drive_status_motor_temperature_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_electric_drive_status_motor_temperature_is_in_range(uint16_t value);

/**
 * Pack message Electric_Energy_Storage_Statuse.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int batteries_gps_motor_2_electric_energy_storage_statuse_pack(
    uint8_t *dst_p,
    const struct batteries_gps_motor_2_electric_energy_storage_statuse_t *src_p,
    size_t size);

/**
 * Unpack message Electric_Energy_Storage_Statuse.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int batteries_gps_motor_2_electric_energy_storage_statuse_unpack(
    struct batteries_gps_motor_2_electric_energy_storage_statuse_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Electric_Energy_Storage_Statuse.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int batteries_gps_motor_2_electric_energy_storage_statuse_init(struct batteries_gps_motor_2_electric_energy_storage_statuse_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_electric_energy_storage_statuse_state_of_charge_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_electric_energy_storage_statuse_state_of_charge_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_electric_energy_storage_statuse_state_of_charge_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t batteries_gps_motor_2_electric_energy_storage_statuse_time_remaining_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_electric_energy_storage_statuse_time_remaining_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_electric_energy_storage_statuse_time_remaining_is_in_range(uint16_t value);

/**
 * Pack message Engine_Param_Dynamic.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int batteries_gps_motor_2_engine_param_dynamic_pack(
    uint8_t *dst_p,
    const struct batteries_gps_motor_2_engine_param_dynamic_t *src_p,
    size_t size);

/**
 * Unpack message Engine_Param_Dynamic.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int batteries_gps_motor_2_engine_param_dynamic_unpack(
    struct batteries_gps_motor_2_engine_param_dynamic_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Engine_Param_Dynamic.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int batteries_gps_motor_2_engine_param_dynamic_init(struct batteries_gps_motor_2_engine_param_dynamic_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t batteries_gps_motor_2_engine_param_dynamic_engine_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_engine_param_dynamic_engine_temp_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_engine_param_dynamic_engine_temp_is_in_range(uint16_t value);

/**
 * Pack message Electric_Drive_Info.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int batteries_gps_motor_2_electric_drive_info_pack(
    uint8_t *dst_p,
    const struct batteries_gps_motor_2_electric_drive_info_t *src_p,
    size_t size);

/**
 * Unpack message Electric_Drive_Info.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int batteries_gps_motor_2_electric_drive_info_unpack(
    struct batteries_gps_motor_2_electric_drive_info_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Electric_Drive_Info.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int batteries_gps_motor_2_electric_drive_info_init(struct batteries_gps_motor_2_electric_drive_info_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_electric_drive_info_motor_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_electric_drive_info_motor_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_electric_drive_info_motor_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t batteries_gps_motor_2_electric_drive_info_motor_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_electric_drive_info_motor_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_electric_drive_info_motor_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t batteries_gps_motor_2_electric_drive_info_motor_voltage_rating_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_electric_drive_info_motor_voltage_rating_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_electric_drive_info_motor_voltage_rating_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t batteries_gps_motor_2_electric_drive_info_max_cont_motor_power_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_electric_drive_info_max_cont_motor_power_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_electric_drive_info_max_cont_motor_power_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t batteries_gps_motor_2_electric_drive_info_max_boost_motor_power_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_electric_drive_info_max_boost_motor_power_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_electric_drive_info_max_boost_motor_power_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t batteries_gps_motor_2_electric_drive_info_max_motor_temp_rating_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_electric_drive_info_max_motor_temp_rating_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_electric_drive_info_max_motor_temp_rating_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t batteries_gps_motor_2_electric_drive_info_rated_motor_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_electric_drive_info_rated_motor_speed_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_electric_drive_info_rated_motor_speed_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t batteries_gps_motor_2_electric_drive_info_max_controller_temp_rating_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_electric_drive_info_max_controller_temp_rating_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_electric_drive_info_max_controller_temp_rating_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t batteries_gps_motor_2_electric_drive_info_motor_shaft_torque_rating_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_electric_drive_info_motor_shaft_torque_rating_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_electric_drive_info_motor_shaft_torque_rating_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t batteries_gps_motor_2_electric_drive_info_motor_dc_volt_derating_threshold_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_electric_drive_info_motor_dc_volt_derating_threshold_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_electric_drive_info_motor_dc_volt_derating_threshold_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t batteries_gps_motor_2_electric_drive_info_motor_dc_volt_cut_off_threshold_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_electric_drive_info_motor_dc_volt_cut_off_threshold_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_electric_drive_info_motor_dc_volt_cut_off_threshold_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t batteries_gps_motor_2_electric_drive_info_motor_hours_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_electric_drive_info_motor_hours_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_electric_drive_info_motor_hours_is_in_range(uint32_t value);

/**
 * Pack message Electric_Drive_Status_Rapid_Up.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int batteries_gps_motor_2_electric_drive_status_rapid_up_pack(
    uint8_t *dst_p,
    const struct batteries_gps_motor_2_electric_drive_status_rapid_up_t *src_p,
    size_t size);

/**
 * Unpack message Electric_Drive_Status_Rapid_Up.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int batteries_gps_motor_2_electric_drive_status_rapid_up_unpack(
    struct batteries_gps_motor_2_electric_drive_status_rapid_up_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Electric_Drive_Status_Rapid_Up.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int batteries_gps_motor_2_electric_drive_status_rapid_up_init(struct batteries_gps_motor_2_electric_drive_status_rapid_up_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t batteries_gps_motor_2_electric_drive_status_rapid_up_motor_dc_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_electric_drive_status_rapid_up_motor_dc_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_electric_drive_status_rapid_up_motor_dc_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t batteries_gps_motor_2_electric_drive_status_rapid_up_motor_dc_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_electric_drive_status_rapid_up_motor_dc_current_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_electric_drive_status_rapid_up_motor_dc_current_is_in_range(int16_t value);

/**
 * Pack message COG_and_SOG.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int batteries_gps_motor_2_cog_and_sog_pack(
    uint8_t *dst_p,
    const struct batteries_gps_motor_2_cog_and_sog_t *src_p,
    size_t size);

/**
 * Unpack message COG_and_SOG.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int batteries_gps_motor_2_cog_and_sog_unpack(
    struct batteries_gps_motor_2_cog_and_sog_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from COG_and_SOG.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int batteries_gps_motor_2_cog_and_sog_init(struct batteries_gps_motor_2_cog_and_sog_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t batteries_gps_motor_2_cog_and_sog_cog_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_cog_and_sog_cog_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_cog_and_sog_cog_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t batteries_gps_motor_2_cog_and_sog_sog_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double batteries_gps_motor_2_cog_and_sog_sog_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool batteries_gps_motor_2_cog_and_sog_sog_is_in_range(uint16_t value);


#ifdef __cplusplus
}
#endif

#endif
